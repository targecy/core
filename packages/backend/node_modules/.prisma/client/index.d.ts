
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Issuer
 * 
 */
export type Issuer = {
  did: string
  name: string
  profileNonce: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model ApiKey
 * 
 */
export type ApiKey = {
  key: string
  expirationDate: Date
  createdAt: Date
  updatedAt: Date
  issuerDid: string
}

/**
 * Model Credential
 * 
 */
export type Credential = {
  did: string
  type: string
  identifier: string
  credential: Prisma.JsonValue
  issuerDid: string
  issuedTo: string
  issuedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Issuers
 * const issuers = await prisma.issuer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Issuers
   * const issuers = await prisma.issuer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.issuer`: Exposes CRUD operations for the **Issuer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Issuers
    * const issuers = await prisma.issuer.findMany()
    * ```
    */
  get issuer(): Prisma.IssuerDelegate<GlobalReject>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<GlobalReject>;

  /**
   * `prisma.credential`: Exposes CRUD operations for the **Credential** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credentials
    * const credentials = await prisma.credential.findMany()
    * ```
    */
  get credential(): Prisma.CredentialDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Issuer: 'Issuer',
    ApiKey: 'ApiKey',
    Credential: 'Credential'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type IssuerCountOutputType
   */


  export type IssuerCountOutputType = {
    credentials: number
    apiKeys: number
  }

  export type IssuerCountOutputTypeSelect = {
    credentials?: boolean
    apiKeys?: boolean
  }

  export type IssuerCountOutputTypeGetPayload<S extends boolean | null | undefined | IssuerCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? IssuerCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (IssuerCountOutputTypeArgs)
    ? IssuerCountOutputType 
    : S extends { select: any } & (IssuerCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof IssuerCountOutputType ? IssuerCountOutputType[P] : never
  } 
      : IssuerCountOutputType




  // Custom InputTypes

  /**
   * IssuerCountOutputType without action
   */
  export type IssuerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the IssuerCountOutputType
     */
    select?: IssuerCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Issuer
   */


  export type AggregateIssuer = {
    _count: IssuerCountAggregateOutputType | null
    _avg: IssuerAvgAggregateOutputType | null
    _sum: IssuerSumAggregateOutputType | null
    _min: IssuerMinAggregateOutputType | null
    _max: IssuerMaxAggregateOutputType | null
  }

  export type IssuerAvgAggregateOutputType = {
    profileNonce: number | null
  }

  export type IssuerSumAggregateOutputType = {
    profileNonce: number | null
  }

  export type IssuerMinAggregateOutputType = {
    did: string | null
    name: string | null
    profileNonce: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IssuerMaxAggregateOutputType = {
    did: string | null
    name: string | null
    profileNonce: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IssuerCountAggregateOutputType = {
    did: number
    name: number
    profileNonce: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IssuerAvgAggregateInputType = {
    profileNonce?: true
  }

  export type IssuerSumAggregateInputType = {
    profileNonce?: true
  }

  export type IssuerMinAggregateInputType = {
    did?: true
    name?: true
    profileNonce?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IssuerMaxAggregateInputType = {
    did?: true
    name?: true
    profileNonce?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IssuerCountAggregateInputType = {
    did?: true
    name?: true
    profileNonce?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IssuerAggregateArgs = {
    /**
     * Filter which Issuer to aggregate.
     */
    where?: IssuerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issuers to fetch.
     */
    orderBy?: Enumerable<IssuerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IssuerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issuers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issuers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Issuers
    **/
    _count?: true | IssuerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IssuerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IssuerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IssuerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IssuerMaxAggregateInputType
  }

  export type GetIssuerAggregateType<T extends IssuerAggregateArgs> = {
        [P in keyof T & keyof AggregateIssuer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIssuer[P]>
      : GetScalarType<T[P], AggregateIssuer[P]>
  }




  export type IssuerGroupByArgs = {
    where?: IssuerWhereInput
    orderBy?: Enumerable<IssuerOrderByWithAggregationInput>
    by: IssuerScalarFieldEnum[]
    having?: IssuerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IssuerCountAggregateInputType | true
    _avg?: IssuerAvgAggregateInputType
    _sum?: IssuerSumAggregateInputType
    _min?: IssuerMinAggregateInputType
    _max?: IssuerMaxAggregateInputType
  }


  export type IssuerGroupByOutputType = {
    did: string
    name: string
    profileNonce: number
    createdAt: Date
    updatedAt: Date
    _count: IssuerCountAggregateOutputType | null
    _avg: IssuerAvgAggregateOutputType | null
    _sum: IssuerSumAggregateOutputType | null
    _min: IssuerMinAggregateOutputType | null
    _max: IssuerMaxAggregateOutputType | null
  }

  type GetIssuerGroupByPayload<T extends IssuerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IssuerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IssuerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IssuerGroupByOutputType[P]>
            : GetScalarType<T[P], IssuerGroupByOutputType[P]>
        }
      >
    >


  export type IssuerSelect = {
    did?: boolean
    name?: boolean
    profileNonce?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    credentials?: boolean | Issuer$credentialsArgs
    apiKeys?: boolean | Issuer$apiKeysArgs
    _count?: boolean | IssuerCountOutputTypeArgs
  }


  export type IssuerInclude = {
    credentials?: boolean | Issuer$credentialsArgs
    apiKeys?: boolean | Issuer$apiKeysArgs
    _count?: boolean | IssuerCountOutputTypeArgs
  }

  export type IssuerGetPayload<S extends boolean | null | undefined | IssuerArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Issuer :
    S extends undefined ? never :
    S extends { include: any } & (IssuerArgs | IssuerFindManyArgs)
    ? Issuer  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'credentials' ? Array < CredentialGetPayload<S['include'][P]>>  :
        P extends 'apiKeys' ? Array < ApiKeyGetPayload<S['include'][P]>>  :
        P extends '_count' ? IssuerCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (IssuerArgs | IssuerFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'credentials' ? Array < CredentialGetPayload<S['select'][P]>>  :
        P extends 'apiKeys' ? Array < ApiKeyGetPayload<S['select'][P]>>  :
        P extends '_count' ? IssuerCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Issuer ? Issuer[P] : never
  } 
      : Issuer


  type IssuerCountArgs = 
    Omit<IssuerFindManyArgs, 'select' | 'include'> & {
      select?: IssuerCountAggregateInputType | true
    }

  export interface IssuerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Issuer that matches the filter.
     * @param {IssuerFindUniqueArgs} args - Arguments to find a Issuer
     * @example
     * // Get one Issuer
     * const issuer = await prisma.issuer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IssuerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IssuerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Issuer'> extends True ? Prisma__IssuerClient<IssuerGetPayload<T>> : Prisma__IssuerClient<IssuerGetPayload<T> | null, null>

    /**
     * Find one Issuer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {IssuerFindUniqueOrThrowArgs} args - Arguments to find a Issuer
     * @example
     * // Get one Issuer
     * const issuer = await prisma.issuer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IssuerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, IssuerFindUniqueOrThrowArgs>
    ): Prisma__IssuerClient<IssuerGetPayload<T>>

    /**
     * Find the first Issuer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssuerFindFirstArgs} args - Arguments to find a Issuer
     * @example
     * // Get one Issuer
     * const issuer = await prisma.issuer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IssuerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IssuerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Issuer'> extends True ? Prisma__IssuerClient<IssuerGetPayload<T>> : Prisma__IssuerClient<IssuerGetPayload<T> | null, null>

    /**
     * Find the first Issuer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssuerFindFirstOrThrowArgs} args - Arguments to find a Issuer
     * @example
     * // Get one Issuer
     * const issuer = await prisma.issuer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IssuerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, IssuerFindFirstOrThrowArgs>
    ): Prisma__IssuerClient<IssuerGetPayload<T>>

    /**
     * Find zero or more Issuers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssuerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Issuers
     * const issuers = await prisma.issuer.findMany()
     * 
     * // Get first 10 Issuers
     * const issuers = await prisma.issuer.findMany({ take: 10 })
     * 
     * // Only select the `did`
     * const issuerWithDidOnly = await prisma.issuer.findMany({ select: { did: true } })
     * 
    **/
    findMany<T extends IssuerFindManyArgs>(
      args?: SelectSubset<T, IssuerFindManyArgs>
    ): PrismaPromise<Array<IssuerGetPayload<T>>>

    /**
     * Create a Issuer.
     * @param {IssuerCreateArgs} args - Arguments to create a Issuer.
     * @example
     * // Create one Issuer
     * const Issuer = await prisma.issuer.create({
     *   data: {
     *     // ... data to create a Issuer
     *   }
     * })
     * 
    **/
    create<T extends IssuerCreateArgs>(
      args: SelectSubset<T, IssuerCreateArgs>
    ): Prisma__IssuerClient<IssuerGetPayload<T>>

    /**
     * Create many Issuers.
     *     @param {IssuerCreateManyArgs} args - Arguments to create many Issuers.
     *     @example
     *     // Create many Issuers
     *     const issuer = await prisma.issuer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IssuerCreateManyArgs>(
      args?: SelectSubset<T, IssuerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Issuer.
     * @param {IssuerDeleteArgs} args - Arguments to delete one Issuer.
     * @example
     * // Delete one Issuer
     * const Issuer = await prisma.issuer.delete({
     *   where: {
     *     // ... filter to delete one Issuer
     *   }
     * })
     * 
    **/
    delete<T extends IssuerDeleteArgs>(
      args: SelectSubset<T, IssuerDeleteArgs>
    ): Prisma__IssuerClient<IssuerGetPayload<T>>

    /**
     * Update one Issuer.
     * @param {IssuerUpdateArgs} args - Arguments to update one Issuer.
     * @example
     * // Update one Issuer
     * const issuer = await prisma.issuer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IssuerUpdateArgs>(
      args: SelectSubset<T, IssuerUpdateArgs>
    ): Prisma__IssuerClient<IssuerGetPayload<T>>

    /**
     * Delete zero or more Issuers.
     * @param {IssuerDeleteManyArgs} args - Arguments to filter Issuers to delete.
     * @example
     * // Delete a few Issuers
     * const { count } = await prisma.issuer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IssuerDeleteManyArgs>(
      args?: SelectSubset<T, IssuerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Issuers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssuerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Issuers
     * const issuer = await prisma.issuer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IssuerUpdateManyArgs>(
      args: SelectSubset<T, IssuerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Issuer.
     * @param {IssuerUpsertArgs} args - Arguments to update or create a Issuer.
     * @example
     * // Update or create a Issuer
     * const issuer = await prisma.issuer.upsert({
     *   create: {
     *     // ... data to create a Issuer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Issuer we want to update
     *   }
     * })
    **/
    upsert<T extends IssuerUpsertArgs>(
      args: SelectSubset<T, IssuerUpsertArgs>
    ): Prisma__IssuerClient<IssuerGetPayload<T>>

    /**
     * Count the number of Issuers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssuerCountArgs} args - Arguments to filter Issuers to count.
     * @example
     * // Count the number of Issuers
     * const count = await prisma.issuer.count({
     *   where: {
     *     // ... the filter for the Issuers we want to count
     *   }
     * })
    **/
    count<T extends IssuerCountArgs>(
      args?: Subset<T, IssuerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IssuerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Issuer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssuerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IssuerAggregateArgs>(args: Subset<T, IssuerAggregateArgs>): PrismaPromise<GetIssuerAggregateType<T>>

    /**
     * Group by Issuer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssuerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IssuerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IssuerGroupByArgs['orderBy'] }
        : { orderBy?: IssuerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IssuerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIssuerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Issuer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IssuerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    credentials<T extends Issuer$credentialsArgs= {}>(args?: Subset<T, Issuer$credentialsArgs>): PrismaPromise<Array<CredentialGetPayload<T>>| Null>;

    apiKeys<T extends Issuer$apiKeysArgs= {}>(args?: Subset<T, Issuer$apiKeysArgs>): PrismaPromise<Array<ApiKeyGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Issuer base type for findUnique actions
   */
  export type IssuerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
    /**
     * Filter, which Issuer to fetch.
     */
    where: IssuerWhereUniqueInput
  }

  /**
   * Issuer findUnique
   */
  export interface IssuerFindUniqueArgs extends IssuerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Issuer findUniqueOrThrow
   */
  export type IssuerFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
    /**
     * Filter, which Issuer to fetch.
     */
    where: IssuerWhereUniqueInput
  }


  /**
   * Issuer base type for findFirst actions
   */
  export type IssuerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
    /**
     * Filter, which Issuer to fetch.
     */
    where?: IssuerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issuers to fetch.
     */
    orderBy?: Enumerable<IssuerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Issuers.
     */
    cursor?: IssuerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issuers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issuers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Issuers.
     */
    distinct?: Enumerable<IssuerScalarFieldEnum>
  }

  /**
   * Issuer findFirst
   */
  export interface IssuerFindFirstArgs extends IssuerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Issuer findFirstOrThrow
   */
  export type IssuerFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
    /**
     * Filter, which Issuer to fetch.
     */
    where?: IssuerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issuers to fetch.
     */
    orderBy?: Enumerable<IssuerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Issuers.
     */
    cursor?: IssuerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issuers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issuers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Issuers.
     */
    distinct?: Enumerable<IssuerScalarFieldEnum>
  }


  /**
   * Issuer findMany
   */
  export type IssuerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
    /**
     * Filter, which Issuers to fetch.
     */
    where?: IssuerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issuers to fetch.
     */
    orderBy?: Enumerable<IssuerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Issuers.
     */
    cursor?: IssuerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issuers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issuers.
     */
    skip?: number
    distinct?: Enumerable<IssuerScalarFieldEnum>
  }


  /**
   * Issuer create
   */
  export type IssuerCreateArgs = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
    /**
     * The data needed to create a Issuer.
     */
    data: XOR<IssuerCreateInput, IssuerUncheckedCreateInput>
  }


  /**
   * Issuer createMany
   */
  export type IssuerCreateManyArgs = {
    /**
     * The data used to create many Issuers.
     */
    data: Enumerable<IssuerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Issuer update
   */
  export type IssuerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
    /**
     * The data needed to update a Issuer.
     */
    data: XOR<IssuerUpdateInput, IssuerUncheckedUpdateInput>
    /**
     * Choose, which Issuer to update.
     */
    where: IssuerWhereUniqueInput
  }


  /**
   * Issuer updateMany
   */
  export type IssuerUpdateManyArgs = {
    /**
     * The data used to update Issuers.
     */
    data: XOR<IssuerUpdateManyMutationInput, IssuerUncheckedUpdateManyInput>
    /**
     * Filter which Issuers to update
     */
    where?: IssuerWhereInput
  }


  /**
   * Issuer upsert
   */
  export type IssuerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
    /**
     * The filter to search for the Issuer to update in case it exists.
     */
    where: IssuerWhereUniqueInput
    /**
     * In case the Issuer found by the `where` argument doesn't exist, create a new Issuer with this data.
     */
    create: XOR<IssuerCreateInput, IssuerUncheckedCreateInput>
    /**
     * In case the Issuer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IssuerUpdateInput, IssuerUncheckedUpdateInput>
  }


  /**
   * Issuer delete
   */
  export type IssuerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
    /**
     * Filter which Issuer to delete.
     */
    where: IssuerWhereUniqueInput
  }


  /**
   * Issuer deleteMany
   */
  export type IssuerDeleteManyArgs = {
    /**
     * Filter which Issuers to delete
     */
    where?: IssuerWhereInput
  }


  /**
   * Issuer.credentials
   */
  export type Issuer$credentialsArgs = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    where?: CredentialWhereInput
    orderBy?: Enumerable<CredentialOrderByWithRelationInput>
    cursor?: CredentialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CredentialScalarFieldEnum>
  }


  /**
   * Issuer.apiKeys
   */
  export type Issuer$apiKeysArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    where?: ApiKeyWhereInput
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    cursor?: ApiKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }


  /**
   * Issuer without action
   */
  export type IssuerArgs = {
    /**
     * Select specific fields to fetch from the Issuer
     */
    select?: IssuerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IssuerInclude | null
  }



  /**
   * Model ApiKey
   */


  export type AggregateApiKey = {
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  export type ApiKeyMinAggregateOutputType = {
    key: string | null
    expirationDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    issuerDid: string | null
  }

  export type ApiKeyMaxAggregateOutputType = {
    key: string | null
    expirationDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    issuerDid: string | null
  }

  export type ApiKeyCountAggregateOutputType = {
    key: number
    expirationDate: number
    createdAt: number
    updatedAt: number
    issuerDid: number
    _all: number
  }


  export type ApiKeyMinAggregateInputType = {
    key?: true
    expirationDate?: true
    createdAt?: true
    updatedAt?: true
    issuerDid?: true
  }

  export type ApiKeyMaxAggregateInputType = {
    key?: true
    expirationDate?: true
    createdAt?: true
    updatedAt?: true
    issuerDid?: true
  }

  export type ApiKeyCountAggregateInputType = {
    key?: true
    expirationDate?: true
    createdAt?: true
    updatedAt?: true
    issuerDid?: true
    _all?: true
  }

  export type ApiKeyAggregateArgs = {
    /**
     * Filter which ApiKey to aggregate.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeys
    **/
    _count?: true | ApiKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyMaxAggregateInputType
  }

  export type GetApiKeyAggregateType<T extends ApiKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKey[P]>
      : GetScalarType<T[P], AggregateApiKey[P]>
  }




  export type ApiKeyGroupByArgs = {
    where?: ApiKeyWhereInput
    orderBy?: Enumerable<ApiKeyOrderByWithAggregationInput>
    by: ApiKeyScalarFieldEnum[]
    having?: ApiKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyCountAggregateInputType | true
    _min?: ApiKeyMinAggregateInputType
    _max?: ApiKeyMaxAggregateInputType
  }


  export type ApiKeyGroupByOutputType = {
    key: string
    expirationDate: Date
    createdAt: Date
    updatedAt: Date
    issuerDid: string
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  type GetApiKeyGroupByPayload<T extends ApiKeyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ApiKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
            : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
        }
      >
    >


  export type ApiKeySelect = {
    key?: boolean
    expirationDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    issuerDid?: boolean
    issuer?: boolean | IssuerArgs
  }


  export type ApiKeyInclude = {
    issuer?: boolean | IssuerArgs
  }

  export type ApiKeyGetPayload<S extends boolean | null | undefined | ApiKeyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ApiKey :
    S extends undefined ? never :
    S extends { include: any } & (ApiKeyArgs | ApiKeyFindManyArgs)
    ? ApiKey  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'issuer' ? IssuerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ApiKeyArgs | ApiKeyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'issuer' ? IssuerGetPayload<S['select'][P]> :  P extends keyof ApiKey ? ApiKey[P] : never
  } 
      : ApiKey


  type ApiKeyCountArgs = 
    Omit<ApiKeyFindManyArgs, 'select' | 'include'> & {
      select?: ApiKeyCountAggregateInputType | true
    }

  export interface ApiKeyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ApiKey that matches the filter.
     * @param {ApiKeyFindUniqueArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApiKeyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApiKeyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ApiKey'> extends True ? Prisma__ApiKeyClient<ApiKeyGetPayload<T>> : Prisma__ApiKeyClient<ApiKeyGetPayload<T> | null, null>

    /**
     * Find one ApiKey that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApiKeyFindUniqueOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApiKeyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ApiKeyFindUniqueOrThrowArgs>
    ): Prisma__ApiKeyClient<ApiKeyGetPayload<T>>

    /**
     * Find the first ApiKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApiKeyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApiKeyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ApiKey'> extends True ? Prisma__ApiKeyClient<ApiKeyGetPayload<T>> : Prisma__ApiKeyClient<ApiKeyGetPayload<T> | null, null>

    /**
     * Find the first ApiKey that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApiKeyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ApiKeyFindFirstOrThrowArgs>
    ): Prisma__ApiKeyClient<ApiKeyGetPayload<T>>

    /**
     * Find zero or more ApiKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeys
     * const apiKeys = await prisma.apiKey.findMany()
     * 
     * // Get first 10 ApiKeys
     * const apiKeys = await prisma.apiKey.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const apiKeyWithKeyOnly = await prisma.apiKey.findMany({ select: { key: true } })
     * 
    **/
    findMany<T extends ApiKeyFindManyArgs>(
      args?: SelectSubset<T, ApiKeyFindManyArgs>
    ): PrismaPromise<Array<ApiKeyGetPayload<T>>>

    /**
     * Create a ApiKey.
     * @param {ApiKeyCreateArgs} args - Arguments to create a ApiKey.
     * @example
     * // Create one ApiKey
     * const ApiKey = await prisma.apiKey.create({
     *   data: {
     *     // ... data to create a ApiKey
     *   }
     * })
     * 
    **/
    create<T extends ApiKeyCreateArgs>(
      args: SelectSubset<T, ApiKeyCreateArgs>
    ): Prisma__ApiKeyClient<ApiKeyGetPayload<T>>

    /**
     * Create many ApiKeys.
     *     @param {ApiKeyCreateManyArgs} args - Arguments to create many ApiKeys.
     *     @example
     *     // Create many ApiKeys
     *     const apiKey = await prisma.apiKey.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApiKeyCreateManyArgs>(
      args?: SelectSubset<T, ApiKeyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ApiKey.
     * @param {ApiKeyDeleteArgs} args - Arguments to delete one ApiKey.
     * @example
     * // Delete one ApiKey
     * const ApiKey = await prisma.apiKey.delete({
     *   where: {
     *     // ... filter to delete one ApiKey
     *   }
     * })
     * 
    **/
    delete<T extends ApiKeyDeleteArgs>(
      args: SelectSubset<T, ApiKeyDeleteArgs>
    ): Prisma__ApiKeyClient<ApiKeyGetPayload<T>>

    /**
     * Update one ApiKey.
     * @param {ApiKeyUpdateArgs} args - Arguments to update one ApiKey.
     * @example
     * // Update one ApiKey
     * const apiKey = await prisma.apiKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApiKeyUpdateArgs>(
      args: SelectSubset<T, ApiKeyUpdateArgs>
    ): Prisma__ApiKeyClient<ApiKeyGetPayload<T>>

    /**
     * Delete zero or more ApiKeys.
     * @param {ApiKeyDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
     * @example
     * // Delete a few ApiKeys
     * const { count } = await prisma.apiKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApiKeyDeleteManyArgs>(
      args?: SelectSubset<T, ApiKeyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApiKeyUpdateManyArgs>(
      args: SelectSubset<T, ApiKeyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiKey.
     * @param {ApiKeyUpsertArgs} args - Arguments to update or create a ApiKey.
     * @example
     * // Update or create a ApiKey
     * const apiKey = await prisma.apiKey.upsert({
     *   create: {
     *     // ... data to create a ApiKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKey we want to update
     *   }
     * })
    **/
    upsert<T extends ApiKeyUpsertArgs>(
      args: SelectSubset<T, ApiKeyUpsertArgs>
    ): Prisma__ApiKeyClient<ApiKeyGetPayload<T>>

    /**
     * Count the number of ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyCountArgs} args - Arguments to filter ApiKeys to count.
     * @example
     * // Count the number of ApiKeys
     * const count = await prisma.apiKey.count({
     *   where: {
     *     // ... the filter for the ApiKeys we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyCountArgs>(
      args?: Subset<T, ApiKeyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyAggregateArgs>(args: Subset<T, ApiKeyAggregateArgs>): PrismaPromise<GetApiKeyAggregateType<T>>

    /**
     * Group by ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApiKeyClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    issuer<T extends IssuerArgs= {}>(args?: Subset<T, IssuerArgs>): Prisma__IssuerClient<IssuerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ApiKey base type for findUnique actions
   */
  export type ApiKeyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findUnique
   */
  export interface ApiKeyFindUniqueArgs extends ApiKeyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ApiKey findUniqueOrThrow
   */
  export type ApiKeyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey base type for findFirst actions
   */
  export type ApiKeyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }

  /**
   * ApiKey findFirst
   */
  export interface ApiKeyFindFirstArgs extends ApiKeyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ApiKey findFirstOrThrow
   */
  export type ApiKeyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }


  /**
   * ApiKey findMany
   */
  export type ApiKeyFindManyArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    /**
     * Filter, which ApiKeys to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }


  /**
   * ApiKey create
   */
  export type ApiKeyCreateArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    /**
     * The data needed to create a ApiKey.
     */
    data: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
  }


  /**
   * ApiKey createMany
   */
  export type ApiKeyCreateManyArgs = {
    /**
     * The data used to create many ApiKeys.
     */
    data: Enumerable<ApiKeyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ApiKey update
   */
  export type ApiKeyUpdateArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    /**
     * The data needed to update a ApiKey.
     */
    data: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
    /**
     * Choose, which ApiKey to update.
     */
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey updateMany
   */
  export type ApiKeyUpdateManyArgs = {
    /**
     * The data used to update ApiKeys.
     */
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     */
    where?: ApiKeyWhereInput
  }


  /**
   * ApiKey upsert
   */
  export type ApiKeyUpsertArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    /**
     * The filter to search for the ApiKey to update in case it exists.
     */
    where: ApiKeyWhereUniqueInput
    /**
     * In case the ApiKey found by the `where` argument doesn't exist, create a new ApiKey with this data.
     */
    create: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
    /**
     * In case the ApiKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
  }


  /**
   * ApiKey delete
   */
  export type ApiKeyDeleteArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
    /**
     * Filter which ApiKey to delete.
     */
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey deleteMany
   */
  export type ApiKeyDeleteManyArgs = {
    /**
     * Filter which ApiKeys to delete
     */
    where?: ApiKeyWhereInput
  }


  /**
   * ApiKey without action
   */
  export type ApiKeyArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiKeyInclude | null
  }



  /**
   * Model Credential
   */


  export type AggregateCredential = {
    _count: CredentialCountAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  export type CredentialMinAggregateOutputType = {
    did: string | null
    type: string | null
    identifier: string | null
    issuerDid: string | null
    issuedTo: string | null
    issuedAt: Date | null
  }

  export type CredentialMaxAggregateOutputType = {
    did: string | null
    type: string | null
    identifier: string | null
    issuerDid: string | null
    issuedTo: string | null
    issuedAt: Date | null
  }

  export type CredentialCountAggregateOutputType = {
    did: number
    type: number
    identifier: number
    credential: number
    issuerDid: number
    issuedTo: number
    issuedAt: number
    _all: number
  }


  export type CredentialMinAggregateInputType = {
    did?: true
    type?: true
    identifier?: true
    issuerDid?: true
    issuedTo?: true
    issuedAt?: true
  }

  export type CredentialMaxAggregateInputType = {
    did?: true
    type?: true
    identifier?: true
    issuerDid?: true
    issuedTo?: true
    issuedAt?: true
  }

  export type CredentialCountAggregateInputType = {
    did?: true
    type?: true
    identifier?: true
    credential?: true
    issuerDid?: true
    issuedTo?: true
    issuedAt?: true
    _all?: true
  }

  export type CredentialAggregateArgs = {
    /**
     * Filter which Credential to aggregate.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: Enumerable<CredentialOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Credentials
    **/
    _count?: true | CredentialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CredentialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CredentialMaxAggregateInputType
  }

  export type GetCredentialAggregateType<T extends CredentialAggregateArgs> = {
        [P in keyof T & keyof AggregateCredential]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredential[P]>
      : GetScalarType<T[P], AggregateCredential[P]>
  }




  export type CredentialGroupByArgs = {
    where?: CredentialWhereInput
    orderBy?: Enumerable<CredentialOrderByWithAggregationInput>
    by: CredentialScalarFieldEnum[]
    having?: CredentialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CredentialCountAggregateInputType | true
    _min?: CredentialMinAggregateInputType
    _max?: CredentialMaxAggregateInputType
  }


  export type CredentialGroupByOutputType = {
    did: string
    type: string
    identifier: string
    credential: JsonValue
    issuerDid: string
    issuedTo: string
    issuedAt: Date
    _count: CredentialCountAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  type GetCredentialGroupByPayload<T extends CredentialGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CredentialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CredentialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CredentialGroupByOutputType[P]>
            : GetScalarType<T[P], CredentialGroupByOutputType[P]>
        }
      >
    >


  export type CredentialSelect = {
    did?: boolean
    type?: boolean
    identifier?: boolean
    credential?: boolean
    issuer?: boolean | IssuerArgs
    issuerDid?: boolean
    issuedTo?: boolean
    issuedAt?: boolean
  }


  export type CredentialInclude = {
    issuer?: boolean | IssuerArgs
  }

  export type CredentialGetPayload<S extends boolean | null | undefined | CredentialArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Credential :
    S extends undefined ? never :
    S extends { include: any } & (CredentialArgs | CredentialFindManyArgs)
    ? Credential  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'issuer' ? IssuerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CredentialArgs | CredentialFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'issuer' ? IssuerGetPayload<S['select'][P]> :  P extends keyof Credential ? Credential[P] : never
  } 
      : Credential


  type CredentialCountArgs = 
    Omit<CredentialFindManyArgs, 'select' | 'include'> & {
      select?: CredentialCountAggregateInputType | true
    }

  export interface CredentialDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Credential that matches the filter.
     * @param {CredentialFindUniqueArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CredentialFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CredentialFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Credential'> extends True ? Prisma__CredentialClient<CredentialGetPayload<T>> : Prisma__CredentialClient<CredentialGetPayload<T> | null, null>

    /**
     * Find one Credential that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CredentialFindUniqueOrThrowArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CredentialFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CredentialFindUniqueOrThrowArgs>
    ): Prisma__CredentialClient<CredentialGetPayload<T>>

    /**
     * Find the first Credential that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindFirstArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CredentialFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CredentialFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Credential'> extends True ? Prisma__CredentialClient<CredentialGetPayload<T>> : Prisma__CredentialClient<CredentialGetPayload<T> | null, null>

    /**
     * Find the first Credential that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindFirstOrThrowArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CredentialFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CredentialFindFirstOrThrowArgs>
    ): Prisma__CredentialClient<CredentialGetPayload<T>>

    /**
     * Find zero or more Credentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credentials
     * const credentials = await prisma.credential.findMany()
     * 
     * // Get first 10 Credentials
     * const credentials = await prisma.credential.findMany({ take: 10 })
     * 
     * // Only select the `did`
     * const credentialWithDidOnly = await prisma.credential.findMany({ select: { did: true } })
     * 
    **/
    findMany<T extends CredentialFindManyArgs>(
      args?: SelectSubset<T, CredentialFindManyArgs>
    ): PrismaPromise<Array<CredentialGetPayload<T>>>

    /**
     * Create a Credential.
     * @param {CredentialCreateArgs} args - Arguments to create a Credential.
     * @example
     * // Create one Credential
     * const Credential = await prisma.credential.create({
     *   data: {
     *     // ... data to create a Credential
     *   }
     * })
     * 
    **/
    create<T extends CredentialCreateArgs>(
      args: SelectSubset<T, CredentialCreateArgs>
    ): Prisma__CredentialClient<CredentialGetPayload<T>>

    /**
     * Create many Credentials.
     *     @param {CredentialCreateManyArgs} args - Arguments to create many Credentials.
     *     @example
     *     // Create many Credentials
     *     const credential = await prisma.credential.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CredentialCreateManyArgs>(
      args?: SelectSubset<T, CredentialCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Credential.
     * @param {CredentialDeleteArgs} args - Arguments to delete one Credential.
     * @example
     * // Delete one Credential
     * const Credential = await prisma.credential.delete({
     *   where: {
     *     // ... filter to delete one Credential
     *   }
     * })
     * 
    **/
    delete<T extends CredentialDeleteArgs>(
      args: SelectSubset<T, CredentialDeleteArgs>
    ): Prisma__CredentialClient<CredentialGetPayload<T>>

    /**
     * Update one Credential.
     * @param {CredentialUpdateArgs} args - Arguments to update one Credential.
     * @example
     * // Update one Credential
     * const credential = await prisma.credential.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CredentialUpdateArgs>(
      args: SelectSubset<T, CredentialUpdateArgs>
    ): Prisma__CredentialClient<CredentialGetPayload<T>>

    /**
     * Delete zero or more Credentials.
     * @param {CredentialDeleteManyArgs} args - Arguments to filter Credentials to delete.
     * @example
     * // Delete a few Credentials
     * const { count } = await prisma.credential.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CredentialDeleteManyArgs>(
      args?: SelectSubset<T, CredentialDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credentials
     * const credential = await prisma.credential.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CredentialUpdateManyArgs>(
      args: SelectSubset<T, CredentialUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Credential.
     * @param {CredentialUpsertArgs} args - Arguments to update or create a Credential.
     * @example
     * // Update or create a Credential
     * const credential = await prisma.credential.upsert({
     *   create: {
     *     // ... data to create a Credential
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credential we want to update
     *   }
     * })
    **/
    upsert<T extends CredentialUpsertArgs>(
      args: SelectSubset<T, CredentialUpsertArgs>
    ): Prisma__CredentialClient<CredentialGetPayload<T>>

    /**
     * Count the number of Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialCountArgs} args - Arguments to filter Credentials to count.
     * @example
     * // Count the number of Credentials
     * const count = await prisma.credential.count({
     *   where: {
     *     // ... the filter for the Credentials we want to count
     *   }
     * })
    **/
    count<T extends CredentialCountArgs>(
      args?: Subset<T, CredentialCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CredentialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CredentialAggregateArgs>(args: Subset<T, CredentialAggregateArgs>): PrismaPromise<GetCredentialAggregateType<T>>

    /**
     * Group by Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CredentialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CredentialGroupByArgs['orderBy'] }
        : { orderBy?: CredentialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CredentialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCredentialGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Credential.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CredentialClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    issuer<T extends IssuerArgs= {}>(args?: Subset<T, IssuerArgs>): Prisma__IssuerClient<IssuerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Credential base type for findUnique actions
   */
  export type CredentialFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    /**
     * Filter, which Credential to fetch.
     */
    where: CredentialWhereUniqueInput
  }

  /**
   * Credential findUnique
   */
  export interface CredentialFindUniqueArgs extends CredentialFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Credential findUniqueOrThrow
   */
  export type CredentialFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    /**
     * Filter, which Credential to fetch.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential base type for findFirst actions
   */
  export type CredentialFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    /**
     * Filter, which Credential to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: Enumerable<CredentialOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credentials.
     */
    distinct?: Enumerable<CredentialScalarFieldEnum>
  }

  /**
   * Credential findFirst
   */
  export interface CredentialFindFirstArgs extends CredentialFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Credential findFirstOrThrow
   */
  export type CredentialFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    /**
     * Filter, which Credential to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: Enumerable<CredentialOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credentials.
     */
    distinct?: Enumerable<CredentialScalarFieldEnum>
  }


  /**
   * Credential findMany
   */
  export type CredentialFindManyArgs = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    /**
     * Filter, which Credentials to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: Enumerable<CredentialOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    distinct?: Enumerable<CredentialScalarFieldEnum>
  }


  /**
   * Credential create
   */
  export type CredentialCreateArgs = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    /**
     * The data needed to create a Credential.
     */
    data: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
  }


  /**
   * Credential createMany
   */
  export type CredentialCreateManyArgs = {
    /**
     * The data used to create many Credentials.
     */
    data: Enumerable<CredentialCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Credential update
   */
  export type CredentialUpdateArgs = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    /**
     * The data needed to update a Credential.
     */
    data: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
    /**
     * Choose, which Credential to update.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential updateMany
   */
  export type CredentialUpdateManyArgs = {
    /**
     * The data used to update Credentials.
     */
    data: XOR<CredentialUpdateManyMutationInput, CredentialUncheckedUpdateManyInput>
    /**
     * Filter which Credentials to update
     */
    where?: CredentialWhereInput
  }


  /**
   * Credential upsert
   */
  export type CredentialUpsertArgs = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    /**
     * The filter to search for the Credential to update in case it exists.
     */
    where: CredentialWhereUniqueInput
    /**
     * In case the Credential found by the `where` argument doesn't exist, create a new Credential with this data.
     */
    create: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
    /**
     * In case the Credential was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
  }


  /**
   * Credential delete
   */
  export type CredentialDeleteArgs = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
    /**
     * Filter which Credential to delete.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential deleteMany
   */
  export type CredentialDeleteManyArgs = {
    /**
     * Filter which Credentials to delete
     */
    where?: CredentialWhereInput
  }


  /**
   * Credential without action
   */
  export type CredentialArgs = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ApiKeyScalarFieldEnum: {
    key: 'key',
    expirationDate: 'expirationDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    issuerDid: 'issuerDid'
  };

  export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


  export const CredentialScalarFieldEnum: {
    did: 'did',
    type: 'type',
    identifier: 'identifier',
    credential: 'credential',
    issuerDid: 'issuerDid',
    issuedTo: 'issuedTo',
    issuedAt: 'issuedAt'
  };

  export type CredentialScalarFieldEnum = (typeof CredentialScalarFieldEnum)[keyof typeof CredentialScalarFieldEnum]


  export const IssuerScalarFieldEnum: {
    did: 'did',
    name: 'name',
    profileNonce: 'profileNonce',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IssuerScalarFieldEnum = (typeof IssuerScalarFieldEnum)[keyof typeof IssuerScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type IssuerWhereInput = {
    AND?: Enumerable<IssuerWhereInput>
    OR?: Enumerable<IssuerWhereInput>
    NOT?: Enumerable<IssuerWhereInput>
    did?: StringFilter | string
    name?: StringFilter | string
    profileNonce?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    credentials?: CredentialListRelationFilter
    apiKeys?: ApiKeyListRelationFilter
  }

  export type IssuerOrderByWithRelationInput = {
    did?: SortOrder
    name?: SortOrder
    profileNonce?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    credentials?: CredentialOrderByRelationAggregateInput
    apiKeys?: ApiKeyOrderByRelationAggregateInput
  }

  export type IssuerWhereUniqueInput = {
    did?: string
  }

  export type IssuerOrderByWithAggregationInput = {
    did?: SortOrder
    name?: SortOrder
    profileNonce?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IssuerCountOrderByAggregateInput
    _avg?: IssuerAvgOrderByAggregateInput
    _max?: IssuerMaxOrderByAggregateInput
    _min?: IssuerMinOrderByAggregateInput
    _sum?: IssuerSumOrderByAggregateInput
  }

  export type IssuerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IssuerScalarWhereWithAggregatesInput>
    OR?: Enumerable<IssuerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IssuerScalarWhereWithAggregatesInput>
    did?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    profileNonce?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ApiKeyWhereInput = {
    AND?: Enumerable<ApiKeyWhereInput>
    OR?: Enumerable<ApiKeyWhereInput>
    NOT?: Enumerable<ApiKeyWhereInput>
    key?: StringFilter | string
    expirationDate?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    issuerDid?: StringFilter | string
    issuer?: XOR<IssuerRelationFilter, IssuerWhereInput>
  }

  export type ApiKeyOrderByWithRelationInput = {
    key?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    issuerDid?: SortOrder
    issuer?: IssuerOrderByWithRelationInput
  }

  export type ApiKeyWhereUniqueInput = {
    key?: string
  }

  export type ApiKeyOrderByWithAggregationInput = {
    key?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    issuerDid?: SortOrder
    _count?: ApiKeyCountOrderByAggregateInput
    _max?: ApiKeyMaxOrderByAggregateInput
    _min?: ApiKeyMinOrderByAggregateInput
  }

  export type ApiKeyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    key?: StringWithAggregatesFilter | string
    expirationDate?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    issuerDid?: StringWithAggregatesFilter | string
  }

  export type CredentialWhereInput = {
    AND?: Enumerable<CredentialWhereInput>
    OR?: Enumerable<CredentialWhereInput>
    NOT?: Enumerable<CredentialWhereInput>
    did?: StringFilter | string
    type?: StringFilter | string
    identifier?: StringFilter | string
    credential?: JsonFilter
    issuer?: XOR<IssuerRelationFilter, IssuerWhereInput>
    issuerDid?: StringFilter | string
    issuedTo?: StringFilter | string
    issuedAt?: DateTimeFilter | Date | string
  }

  export type CredentialOrderByWithRelationInput = {
    did?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    credential?: SortOrder
    issuer?: IssuerOrderByWithRelationInput
    issuerDid?: SortOrder
    issuedTo?: SortOrder
    issuedAt?: SortOrder
  }

  export type CredentialWhereUniqueInput = {
    did?: string
  }

  export type CredentialOrderByWithAggregationInput = {
    did?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    credential?: SortOrder
    issuerDid?: SortOrder
    issuedTo?: SortOrder
    issuedAt?: SortOrder
    _count?: CredentialCountOrderByAggregateInput
    _max?: CredentialMaxOrderByAggregateInput
    _min?: CredentialMinOrderByAggregateInput
  }

  export type CredentialScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CredentialScalarWhereWithAggregatesInput>
    OR?: Enumerable<CredentialScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CredentialScalarWhereWithAggregatesInput>
    did?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    identifier?: StringWithAggregatesFilter | string
    credential?: JsonWithAggregatesFilter
    issuerDid?: StringWithAggregatesFilter | string
    issuedTo?: StringWithAggregatesFilter | string
    issuedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type IssuerCreateInput = {
    did: string
    name: string
    profileNonce: number
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialCreateNestedManyWithoutIssuerInput
    apiKeys?: ApiKeyCreateNestedManyWithoutIssuerInput
  }

  export type IssuerUncheckedCreateInput = {
    did: string
    name: string
    profileNonce: number
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialUncheckedCreateNestedManyWithoutIssuerInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutIssuerInput
  }

  export type IssuerUpdateInput = {
    did?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profileNonce?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUpdateManyWithoutIssuerNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutIssuerNestedInput
  }

  export type IssuerUncheckedUpdateInput = {
    did?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profileNonce?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUncheckedUpdateManyWithoutIssuerNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutIssuerNestedInput
  }

  export type IssuerCreateManyInput = {
    did: string
    name: string
    profileNonce: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IssuerUpdateManyMutationInput = {
    did?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profileNonce?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IssuerUncheckedUpdateManyInput = {
    did?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profileNonce?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyCreateInput = {
    key: string
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    issuer: IssuerCreateNestedOneWithoutApiKeysInput
  }

  export type ApiKeyUncheckedCreateInput = {
    key: string
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerDid: string
  }

  export type ApiKeyUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuer?: IssuerUpdateOneRequiredWithoutApiKeysNestedInput
  }

  export type ApiKeyUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerDid?: StringFieldUpdateOperationsInput | string
  }

  export type ApiKeyCreateManyInput = {
    key: string
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerDid: string
  }

  export type ApiKeyUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerDid?: StringFieldUpdateOperationsInput | string
  }

  export type CredentialCreateInput = {
    did: string
    type: string
    identifier: string
    credential: JsonNullValueInput | InputJsonValue
    issuer: IssuerCreateNestedOneWithoutCredentialsInput
    issuedTo: string
    issuedAt?: Date | string
  }

  export type CredentialUncheckedCreateInput = {
    did: string
    type: string
    identifier: string
    credential: JsonNullValueInput | InputJsonValue
    issuerDid: string
    issuedTo: string
    issuedAt?: Date | string
  }

  export type CredentialUpdateInput = {
    did?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    credential?: JsonNullValueInput | InputJsonValue
    issuer?: IssuerUpdateOneRequiredWithoutCredentialsNestedInput
    issuedTo?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CredentialUncheckedUpdateInput = {
    did?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    credential?: JsonNullValueInput | InputJsonValue
    issuerDid?: StringFieldUpdateOperationsInput | string
    issuedTo?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CredentialCreateManyInput = {
    did: string
    type: string
    identifier: string
    credential: JsonNullValueInput | InputJsonValue
    issuerDid: string
    issuedTo: string
    issuedAt?: Date | string
  }

  export type CredentialUpdateManyMutationInput = {
    did?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    credential?: JsonNullValueInput | InputJsonValue
    issuedTo?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CredentialUncheckedUpdateManyInput = {
    did?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    credential?: JsonNullValueInput | InputJsonValue
    issuerDid?: StringFieldUpdateOperationsInput | string
    issuedTo?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CredentialListRelationFilter = {
    every?: CredentialWhereInput
    some?: CredentialWhereInput
    none?: CredentialWhereInput
  }

  export type ApiKeyListRelationFilter = {
    every?: ApiKeyWhereInput
    some?: ApiKeyWhereInput
    none?: ApiKeyWhereInput
  }

  export type CredentialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApiKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IssuerCountOrderByAggregateInput = {
    did?: SortOrder
    name?: SortOrder
    profileNonce?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IssuerAvgOrderByAggregateInput = {
    profileNonce?: SortOrder
  }

  export type IssuerMaxOrderByAggregateInput = {
    did?: SortOrder
    name?: SortOrder
    profileNonce?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IssuerMinOrderByAggregateInput = {
    did?: SortOrder
    name?: SortOrder
    profileNonce?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IssuerSumOrderByAggregateInput = {
    profileNonce?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IssuerRelationFilter = {
    is?: IssuerWhereInput
    isNot?: IssuerWhereInput
  }

  export type ApiKeyCountOrderByAggregateInput = {
    key?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    issuerDid?: SortOrder
  }

  export type ApiKeyMaxOrderByAggregateInput = {
    key?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    issuerDid?: SortOrder
  }

  export type ApiKeyMinOrderByAggregateInput = {
    key?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    issuerDid?: SortOrder
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type CredentialCountOrderByAggregateInput = {
    did?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    credential?: SortOrder
    issuerDid?: SortOrder
    issuedTo?: SortOrder
    issuedAt?: SortOrder
  }

  export type CredentialMaxOrderByAggregateInput = {
    did?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    issuerDid?: SortOrder
    issuedTo?: SortOrder
    issuedAt?: SortOrder
  }

  export type CredentialMinOrderByAggregateInput = {
    did?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    issuerDid?: SortOrder
    issuedTo?: SortOrder
    issuedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type CredentialCreateNestedManyWithoutIssuerInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutIssuerInput>, Enumerable<CredentialUncheckedCreateWithoutIssuerInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutIssuerInput>
    createMany?: CredentialCreateManyIssuerInputEnvelope
    connect?: Enumerable<CredentialWhereUniqueInput>
  }

  export type ApiKeyCreateNestedManyWithoutIssuerInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutIssuerInput>, Enumerable<ApiKeyUncheckedCreateWithoutIssuerInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutIssuerInput>
    createMany?: ApiKeyCreateManyIssuerInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type CredentialUncheckedCreateNestedManyWithoutIssuerInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutIssuerInput>, Enumerable<CredentialUncheckedCreateWithoutIssuerInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutIssuerInput>
    createMany?: CredentialCreateManyIssuerInputEnvelope
    connect?: Enumerable<CredentialWhereUniqueInput>
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutIssuerInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutIssuerInput>, Enumerable<ApiKeyUncheckedCreateWithoutIssuerInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutIssuerInput>
    createMany?: ApiKeyCreateManyIssuerInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CredentialUpdateManyWithoutIssuerNestedInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutIssuerInput>, Enumerable<CredentialUncheckedCreateWithoutIssuerInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutIssuerInput>
    upsert?: Enumerable<CredentialUpsertWithWhereUniqueWithoutIssuerInput>
    createMany?: CredentialCreateManyIssuerInputEnvelope
    set?: Enumerable<CredentialWhereUniqueInput>
    disconnect?: Enumerable<CredentialWhereUniqueInput>
    delete?: Enumerable<CredentialWhereUniqueInput>
    connect?: Enumerable<CredentialWhereUniqueInput>
    update?: Enumerable<CredentialUpdateWithWhereUniqueWithoutIssuerInput>
    updateMany?: Enumerable<CredentialUpdateManyWithWhereWithoutIssuerInput>
    deleteMany?: Enumerable<CredentialScalarWhereInput>
  }

  export type ApiKeyUpdateManyWithoutIssuerNestedInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutIssuerInput>, Enumerable<ApiKeyUncheckedCreateWithoutIssuerInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutIssuerInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutIssuerInput>
    createMany?: ApiKeyCreateManyIssuerInputEnvelope
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutIssuerInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutIssuerInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type CredentialUncheckedUpdateManyWithoutIssuerNestedInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutIssuerInput>, Enumerable<CredentialUncheckedCreateWithoutIssuerInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutIssuerInput>
    upsert?: Enumerable<CredentialUpsertWithWhereUniqueWithoutIssuerInput>
    createMany?: CredentialCreateManyIssuerInputEnvelope
    set?: Enumerable<CredentialWhereUniqueInput>
    disconnect?: Enumerable<CredentialWhereUniqueInput>
    delete?: Enumerable<CredentialWhereUniqueInput>
    connect?: Enumerable<CredentialWhereUniqueInput>
    update?: Enumerable<CredentialUpdateWithWhereUniqueWithoutIssuerInput>
    updateMany?: Enumerable<CredentialUpdateManyWithWhereWithoutIssuerInput>
    deleteMany?: Enumerable<CredentialScalarWhereInput>
  }

  export type ApiKeyUncheckedUpdateManyWithoutIssuerNestedInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutIssuerInput>, Enumerable<ApiKeyUncheckedCreateWithoutIssuerInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutIssuerInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutIssuerInput>
    createMany?: ApiKeyCreateManyIssuerInputEnvelope
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutIssuerInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutIssuerInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type IssuerCreateNestedOneWithoutApiKeysInput = {
    create?: XOR<IssuerCreateWithoutApiKeysInput, IssuerUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: IssuerCreateOrConnectWithoutApiKeysInput
    connect?: IssuerWhereUniqueInput
  }

  export type IssuerUpdateOneRequiredWithoutApiKeysNestedInput = {
    create?: XOR<IssuerCreateWithoutApiKeysInput, IssuerUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: IssuerCreateOrConnectWithoutApiKeysInput
    upsert?: IssuerUpsertWithoutApiKeysInput
    connect?: IssuerWhereUniqueInput
    update?: XOR<IssuerUpdateWithoutApiKeysInput, IssuerUncheckedUpdateWithoutApiKeysInput>
  }

  export type IssuerCreateNestedOneWithoutCredentialsInput = {
    create?: XOR<IssuerCreateWithoutCredentialsInput, IssuerUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: IssuerCreateOrConnectWithoutCredentialsInput
    connect?: IssuerWhereUniqueInput
  }

  export type IssuerUpdateOneRequiredWithoutCredentialsNestedInput = {
    create?: XOR<IssuerCreateWithoutCredentialsInput, IssuerUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: IssuerCreateOrConnectWithoutCredentialsInput
    upsert?: IssuerUpsertWithoutCredentialsInput
    connect?: IssuerWhereUniqueInput
    update?: XOR<IssuerUpdateWithoutCredentialsInput, IssuerUncheckedUpdateWithoutCredentialsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type CredentialCreateWithoutIssuerInput = {
    did: string
    type: string
    identifier: string
    credential: JsonNullValueInput | InputJsonValue
    issuedTo: string
    issuedAt?: Date | string
  }

  export type CredentialUncheckedCreateWithoutIssuerInput = {
    did: string
    type: string
    identifier: string
    credential: JsonNullValueInput | InputJsonValue
    issuedTo: string
    issuedAt?: Date | string
  }

  export type CredentialCreateOrConnectWithoutIssuerInput = {
    where: CredentialWhereUniqueInput
    create: XOR<CredentialCreateWithoutIssuerInput, CredentialUncheckedCreateWithoutIssuerInput>
  }

  export type CredentialCreateManyIssuerInputEnvelope = {
    data: Enumerable<CredentialCreateManyIssuerInput>
    skipDuplicates?: boolean
  }

  export type ApiKeyCreateWithoutIssuerInput = {
    key: string
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApiKeyUncheckedCreateWithoutIssuerInput = {
    key: string
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApiKeyCreateOrConnectWithoutIssuerInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutIssuerInput, ApiKeyUncheckedCreateWithoutIssuerInput>
  }

  export type ApiKeyCreateManyIssuerInputEnvelope = {
    data: Enumerable<ApiKeyCreateManyIssuerInput>
    skipDuplicates?: boolean
  }

  export type CredentialUpsertWithWhereUniqueWithoutIssuerInput = {
    where: CredentialWhereUniqueInput
    update: XOR<CredentialUpdateWithoutIssuerInput, CredentialUncheckedUpdateWithoutIssuerInput>
    create: XOR<CredentialCreateWithoutIssuerInput, CredentialUncheckedCreateWithoutIssuerInput>
  }

  export type CredentialUpdateWithWhereUniqueWithoutIssuerInput = {
    where: CredentialWhereUniqueInput
    data: XOR<CredentialUpdateWithoutIssuerInput, CredentialUncheckedUpdateWithoutIssuerInput>
  }

  export type CredentialUpdateManyWithWhereWithoutIssuerInput = {
    where: CredentialScalarWhereInput
    data: XOR<CredentialUpdateManyMutationInput, CredentialUncheckedUpdateManyWithoutCredentialsInput>
  }

  export type CredentialScalarWhereInput = {
    AND?: Enumerable<CredentialScalarWhereInput>
    OR?: Enumerable<CredentialScalarWhereInput>
    NOT?: Enumerable<CredentialScalarWhereInput>
    did?: StringFilter | string
    type?: StringFilter | string
    identifier?: StringFilter | string
    credential?: JsonFilter
    issuerDid?: StringFilter | string
    issuedTo?: StringFilter | string
    issuedAt?: DateTimeFilter | Date | string
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutIssuerInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutIssuerInput, ApiKeyUncheckedUpdateWithoutIssuerInput>
    create: XOR<ApiKeyCreateWithoutIssuerInput, ApiKeyUncheckedCreateWithoutIssuerInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutIssuerInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutIssuerInput, ApiKeyUncheckedUpdateWithoutIssuerInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutIssuerInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutApiKeysInput>
  }

  export type ApiKeyScalarWhereInput = {
    AND?: Enumerable<ApiKeyScalarWhereInput>
    OR?: Enumerable<ApiKeyScalarWhereInput>
    NOT?: Enumerable<ApiKeyScalarWhereInput>
    key?: StringFilter | string
    expirationDate?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    issuerDid?: StringFilter | string
  }

  export type IssuerCreateWithoutApiKeysInput = {
    did: string
    name: string
    profileNonce: number
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialCreateNestedManyWithoutIssuerInput
  }

  export type IssuerUncheckedCreateWithoutApiKeysInput = {
    did: string
    name: string
    profileNonce: number
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialUncheckedCreateNestedManyWithoutIssuerInput
  }

  export type IssuerCreateOrConnectWithoutApiKeysInput = {
    where: IssuerWhereUniqueInput
    create: XOR<IssuerCreateWithoutApiKeysInput, IssuerUncheckedCreateWithoutApiKeysInput>
  }

  export type IssuerUpsertWithoutApiKeysInput = {
    update: XOR<IssuerUpdateWithoutApiKeysInput, IssuerUncheckedUpdateWithoutApiKeysInput>
    create: XOR<IssuerCreateWithoutApiKeysInput, IssuerUncheckedCreateWithoutApiKeysInput>
  }

  export type IssuerUpdateWithoutApiKeysInput = {
    did?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profileNonce?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUpdateManyWithoutIssuerNestedInput
  }

  export type IssuerUncheckedUpdateWithoutApiKeysInput = {
    did?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profileNonce?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUncheckedUpdateManyWithoutIssuerNestedInput
  }

  export type IssuerCreateWithoutCredentialsInput = {
    did: string
    name: string
    profileNonce: number
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKeys?: ApiKeyCreateNestedManyWithoutIssuerInput
  }

  export type IssuerUncheckedCreateWithoutCredentialsInput = {
    did: string
    name: string
    profileNonce: number
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutIssuerInput
  }

  export type IssuerCreateOrConnectWithoutCredentialsInput = {
    where: IssuerWhereUniqueInput
    create: XOR<IssuerCreateWithoutCredentialsInput, IssuerUncheckedCreateWithoutCredentialsInput>
  }

  export type IssuerUpsertWithoutCredentialsInput = {
    update: XOR<IssuerUpdateWithoutCredentialsInput, IssuerUncheckedUpdateWithoutCredentialsInput>
    create: XOR<IssuerCreateWithoutCredentialsInput, IssuerUncheckedCreateWithoutCredentialsInput>
  }

  export type IssuerUpdateWithoutCredentialsInput = {
    did?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profileNonce?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKeys?: ApiKeyUpdateManyWithoutIssuerNestedInput
  }

  export type IssuerUncheckedUpdateWithoutCredentialsInput = {
    did?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profileNonce?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutIssuerNestedInput
  }

  export type CredentialCreateManyIssuerInput = {
    did: string
    type: string
    identifier: string
    credential: JsonNullValueInput | InputJsonValue
    issuedTo: string
    issuedAt?: Date | string
  }

  export type ApiKeyCreateManyIssuerInput = {
    key: string
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CredentialUpdateWithoutIssuerInput = {
    did?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    credential?: JsonNullValueInput | InputJsonValue
    issuedTo?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CredentialUncheckedUpdateWithoutIssuerInput = {
    did?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    credential?: JsonNullValueInput | InputJsonValue
    issuedTo?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CredentialUncheckedUpdateManyWithoutCredentialsInput = {
    did?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    credential?: JsonNullValueInput | InputJsonValue
    issuedTo?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUpdateWithoutIssuerInput = {
    key?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUncheckedUpdateWithoutIssuerInput = {
    key?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUncheckedUpdateManyWithoutApiKeysInput = {
    key?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}