/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Errors,
  ErrorsInterface,
} from "../../../contracts/libraries/Errors";

const _abi = [
  {
    inputs: [],
    name: "AdConsumed",
    type: "error",
  },
  {
    inputs: [],
    name: "AdNotAvailable",
    type: "error",
  },
  {
    inputs: [],
    name: "AudiencesMustHaveAtLeastOneSegment",
    type: "error",
  },
  {
    inputs: [],
    name: "ConsumptionPriceTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "ImpressionOrClickOnlyAvailableThroughRelayer",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAttribution",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidNewBudget",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProofs",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidZKProof",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidZKProofsInput",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidZKProofsLength",
    type: "error",
  },
  {
    inputs: [],
    name: "NoRemainingComsumptionsForTheDay",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAdvertiser",
    type: "error",
  },
  {
    inputs: [],
    name: "PercentageTooBig",
    type: "error",
  },
  {
    inputs: [],
    name: "PercentageTotalTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "PublisherBlacklistedInAd",
    type: "error",
  },
  {
    inputs: [],
    name: "PublisherNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "PublisherPercentageTooBig",
    type: "error",
  },
  {
    inputs: [],
    name: "SignatureExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "SignatureInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "UseConsumeAdMethodInstead",
    type: "error",
  },
  {
    inputs: [],
    name: "WeekdayBlacklistedInAd",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207462d26a1635812b7162250cb374c80109909ec7f0de9512ea6df3c484f1357964736f6c634300080a0033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Errors";
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }
  static readonly contractName: "Errors";

  public readonly contractName: "Errors";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
