/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockValidator,
  MockValidatorInterface,
} from "../../../contracts/mock/MockValidator";

const _abi = [
  {
    inputs: [],
    name: "getChallengeInputIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getCircuitId",
    outputs: [
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserIdInputIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "inputs",
        type: "uint256[]",
      },
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "schema",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slotIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "operator",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "value",
            type: "uint256[]",
          },
          {
            internalType: "string",
            name: "circuitId",
            type: "string",
          },
        ],
        internalType: "struct ICircuitValidator.CircuitQuery",
        name: "query",
        type: "tuple",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "r",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061050e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806359a2aeaa1461005157806367e1d504146100805780637b47323c146100a35780639f442afa146100b4575b600080fd5b60408051808201825260048152636d6f636b60e01b60208201529051610077919061015d565b60405180910390f35b61009361008e3660046103f7565b6100bb565b6040519015158152602001610077565b60015b604051908152602001610077565b60006100a6565b60008086511161010a5760405162461bcd60e51b8152602060048201526015602482015274092dcecc2d8d2c840d2dce0eae8e640d8cadccee8d605b1b60448201526064015b60405180910390fd5b60008260400151116101515760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21037b832b930ba37b960811b6044820152606401610101565b50600195945050505050565b600060208083528351808285015260005b8181101561018a5785810183015185820160400152820161016e565b8181111561019c576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156101eb576101eb6101b2565b60405290565b6040805190810167ffffffffffffffff811182821017156101eb576101eb6101b2565b604051601f8201601f1916810167ffffffffffffffff8111828210171561023d5761023d6101b2565b604052919050565b600082601f83011261025657600080fd5b8135602067ffffffffffffffff821115610272576102726101b2565b8160051b610281828201610214565b928352848101820192828101908785111561029b57600080fd5b83870192505b848310156102ba578235825291830191908301906102a1565b979650505050505050565b600082601f8301126102d657600080fd5b6102de6101f1565b8060408401858111156102f057600080fd5b845b8181101561030a5780358452602093840193016102f2565b509095945050505050565b600060a0828403121561032757600080fd5b61032f6101c8565b9050813581526020808301358183015260408301356040830152606083013567ffffffffffffffff8082111561036457600080fd5b61037086838701610245565b6060850152608085013591508082111561038957600080fd5b818501915085601f83011261039d57600080fd5b8135818111156103af576103af6101b2565b6103c1601f8201601f19168501610214565b915080825286848285010111156103d757600080fd5b808484018584013760008482840101525080608085015250505092915050565b6000806000806000610140868803121561041057600080fd5b853567ffffffffffffffff8082111561042857600080fd5b61043489838a01610245565b96506020915061044689838a016102c5565b955088607f89011261045757600080fd5b61045f6101f1565b8060e08a018b81111561047157600080fd5b60608b015b81811015610496576104888d826102c5565b845292850192604001610476565b508197506104a48c826102c5565b96505050506101208801359150808211156104be57600080fd5b506104cb88828901610315565b915050929550929590935056fea2646970667358221220a6f6925cc0aa3a8d4f94cb77beba9b075e256412c41959f957cfc70872e6198064736f6c634300080a0033";

type MockValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockValidator__factory extends ContractFactory {
  constructor(...args: MockValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockValidator";
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockValidator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockValidator__factory {
    return super.connect(runner) as MockValidator__factory;
  }
  static readonly contractName: "MockValidator";

  public readonly contractName: "MockValidator";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockValidatorInterface {
    return new Interface(_abi) as MockValidatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockValidator {
    return new Contract(address, _abi, runner) as unknown as MockValidator;
  }
}
