/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockExternalVaultContractInterface extends Interface {
  getFunction(
    nameOrSignature: "owner" | "setValue" | "value"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ValueSet"): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setValue", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
}

export namespace ValueSetEvent {
  export type InputTuple = [value: BigNumberish, owner: AddressLike];
  export type OutputTuple = [value: bigint, owner: string];
  export interface OutputObject {
    value: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockExternalVaultContract extends BaseContract {
  contractName: "MockExternalVaultContract";

  connect(runner?: ContractRunner | null): MockExternalVaultContract;
  waitForDeployment(): Promise<this>;

  interface: MockExternalVaultContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  setValue: TypedContractMethod<[_bytes: BytesLike], [void], "payable">;

  value: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setValue"
  ): TypedContractMethod<[_bytes: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "value"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ValueSet"
  ): TypedContractEvent<
    ValueSetEvent.InputTuple,
    ValueSetEvent.OutputTuple,
    ValueSetEvent.OutputObject
  >;

  filters: {
    "ValueSet(uint256,address)": TypedContractEvent<
      ValueSetEvent.InputTuple,
      ValueSetEvent.OutputTuple,
      ValueSetEvent.OutputObject
    >;
    ValueSet: TypedContractEvent<
      ValueSetEvent.InputTuple,
      ValueSetEvent.OutputTuple,
      ValueSetEvent.OutputObject
    >;
  };
}
