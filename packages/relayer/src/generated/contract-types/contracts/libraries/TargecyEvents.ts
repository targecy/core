/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export declare namespace DataTypes {
  export type AdStruct = {
    advertiser: AddressLike;
    metadataURI: string;
    attribution: BigNumberish;
    active: boolean;
    abi: string;
    target: AddressLike;
    startingTimestamp: BigNumberish;
    endingTimestamp: BigNumberish;
    audienceIds: BigNumberish[];
    blacklistedPublishers: AddressLike[];
    blacklistedWeekdays: BigNumberish[];
    maxBudget: BigNumberish;
    currentBudget: BigNumberish;
    maxConsumptionsPerDay: BigNumberish;
    maxPricePerConsumption: BigNumberish;
    consumptions: BigNumberish;
  };

  export type AdStructOutput = [
    advertiser: string,
    metadataURI: string,
    attribution: bigint,
    active: boolean,
    abi: string,
    target: string,
    startingTimestamp: bigint,
    endingTimestamp: bigint,
    audienceIds: bigint[],
    blacklistedPublishers: string[],
    blacklistedWeekdays: bigint[],
    maxBudget: bigint,
    currentBudget: bigint,
    maxConsumptionsPerDay: bigint,
    maxPricePerConsumption: bigint,
    consumptions: bigint
  ] & {
    advertiser: string;
    metadataURI: string;
    attribution: bigint;
    active: boolean;
    abi: string;
    target: string;
    startingTimestamp: bigint;
    endingTimestamp: bigint;
    audienceIds: bigint[];
    blacklistedPublishers: string[];
    blacklistedWeekdays: bigint[];
    maxBudget: bigint;
    currentBudget: bigint;
    maxConsumptionsPerDay: bigint;
    maxPricePerConsumption: bigint;
    consumptions: bigint;
  };

  export type PublisherSettingsStruct = {
    userRewardsPercentage: BigNumberish;
    vault: AddressLike;
    active: boolean;
    cpi: BigNumberish;
    cpc: BigNumberish;
    cpa: BigNumberish;
  };

  export type PublisherSettingsStructOutput = [
    userRewardsPercentage: bigint,
    vault: string,
    active: boolean,
    cpi: bigint,
    cpc: bigint,
    cpa: bigint
  ] & {
    userRewardsPercentage: bigint;
    vault: string;
    active: boolean;
    cpi: bigint;
    cpc: bigint;
    cpa: bigint;
  };

  export type NewAdStruct = {
    metadataURI: string;
    attribution: BigNumberish;
    active: boolean;
    abi: string;
    target: AddressLike;
    startingTimestamp: BigNumberish;
    endingTimestamp: BigNumberish;
    audienceIds: BigNumberish[];
    blacklistedPublishers: AddressLike[];
    blacklistedWeekdays: BigNumberish[];
    budget: BigNumberish;
    maxPricePerConsumption: BigNumberish;
    maxConsumptionsPerDay: BigNumberish;
  };

  export type NewAdStructOutput = [
    metadataURI: string,
    attribution: bigint,
    active: boolean,
    abi: string,
    target: string,
    startingTimestamp: bigint,
    endingTimestamp: bigint,
    audienceIds: bigint[],
    blacklistedPublishers: string[],
    blacklistedWeekdays: bigint[],
    budget: bigint,
    maxPricePerConsumption: bigint,
    maxConsumptionsPerDay: bigint
  ] & {
    metadataURI: string;
    attribution: bigint;
    active: boolean;
    abi: string;
    target: string;
    startingTimestamp: bigint;
    endingTimestamp: bigint;
    audienceIds: bigint[];
    blacklistedPublishers: string[];
    blacklistedWeekdays: bigint[];
    budget: bigint;
    maxPricePerConsumption: bigint;
    maxConsumptionsPerDay: bigint;
  };

  export type RewardsDistributionStruct = {
    publisher: AddressLike;
    publisherAmount: BigNumberish;
    user: AddressLike;
    userAmount: BigNumberish;
    protocolVault: AddressLike;
    protocolAmount: BigNumberish;
  };

  export type RewardsDistributionStructOutput = [
    publisher: string,
    publisherAmount: bigint,
    user: string,
    userAmount: bigint,
    protocolVault: string,
    protocolAmount: bigint
  ] & {
    publisher: string;
    publisherAmount: bigint;
    user: string;
    userAmount: bigint;
    protocolVault: string;
    protocolAmount: bigint;
  };
}

export declare namespace ICircuitValidator {
  export type CircuitQueryStruct = {
    schema: BigNumberish;
    slotIndex: BigNumberish;
    operator: BigNumberish;
    value: BigNumberish[];
    circuitId: string;
  };

  export type CircuitQueryStructOutput = [
    schema: bigint,
    slotIndex: bigint,
    operator: bigint,
    value: bigint[],
    circuitId: string
  ] & {
    schema: bigint;
    slotIndex: bigint;
    operator: bigint;
    value: bigint[];
    circuitId: string;
  };
}

export interface TargecyEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AdConsumed"
      | "AdCreated"
      | "AdDeleted"
      | "AdEdited"
      | "AdPaused"
      | "AdUnpaused"
      | "AdminRemoved"
      | "AdminSet"
      | "AdvertiserBudgetFunded"
      | "AdvertiserBudgetWithdrawn"
      | "AudienceCreated"
      | "AudienceDeleted"
      | "AudienceEdited"
      | "PausePublisher"
      | "PublisherRemovedFromWhitelist"
      | "PublisherWhitelisted"
      | "RewardsDistributed"
      | "SegmentCreated"
      | "SegmentDeleted"
      | "SegmentEdited"
      | "UnpausePublisher"
  ): EventFragment;
}

export namespace AdConsumedEvent {
  export type InputTuple = [
    adId: BigNumberish,
    ad: DataTypes.AdStruct,
    publisher: DataTypes.PublisherSettingsStruct,
    consumptionPrice: BigNumberish
  ];
  export type OutputTuple = [
    adId: bigint,
    ad: DataTypes.AdStructOutput,
    publisher: DataTypes.PublisherSettingsStructOutput,
    consumptionPrice: bigint
  ];
  export interface OutputObject {
    adId: bigint;
    ad: DataTypes.AdStructOutput;
    publisher: DataTypes.PublisherSettingsStructOutput;
    consumptionPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdCreatedEvent {
  export type InputTuple = [
    adId: BigNumberish,
    advertiser: AddressLike,
    ad: DataTypes.NewAdStruct
  ];
  export type OutputTuple = [
    adId: bigint,
    advertiser: string,
    ad: DataTypes.NewAdStructOutput
  ];
  export interface OutputObject {
    adId: bigint;
    advertiser: string;
    ad: DataTypes.NewAdStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdDeletedEvent {
  export type InputTuple = [adId: BigNumberish];
  export type OutputTuple = [adId: bigint];
  export interface OutputObject {
    adId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdEditedEvent {
  export type InputTuple = [adId: BigNumberish, ad: DataTypes.AdStruct];
  export type OutputTuple = [adId: bigint, ad: DataTypes.AdStructOutput];
  export interface OutputObject {
    adId: bigint;
    ad: DataTypes.AdStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdPausedEvent {
  export type InputTuple = [adId: BigNumberish];
  export type OutputTuple = [adId: bigint];
  export interface OutputObject {
    adId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdUnpausedEvent {
  export type InputTuple = [adId: BigNumberish];
  export type OutputTuple = [adId: bigint];
  export interface OutputObject {
    adId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminSetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdvertiserBudgetFundedEvent {
  export type InputTuple = [advertiser: AddressLike, amount: BigNumberish];
  export type OutputTuple = [advertiser: string, amount: bigint];
  export interface OutputObject {
    advertiser: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdvertiserBudgetWithdrawnEvent {
  export type InputTuple = [advertiser: AddressLike, amount: BigNumberish];
  export type OutputTuple = [advertiser: string, amount: bigint];
  export interface OutputObject {
    advertiser: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AudienceCreatedEvent {
  export type InputTuple = [
    audienceId: BigNumberish,
    metadataURI: string,
    segmentIds: BigNumberish[]
  ];
  export type OutputTuple = [
    audienceId: bigint,
    metadataURI: string,
    segmentIds: bigint[]
  ];
  export interface OutputObject {
    audienceId: bigint;
    metadataURI: string;
    segmentIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AudienceDeletedEvent {
  export type InputTuple = [audienceId: BigNumberish];
  export type OutputTuple = [audienceId: bigint];
  export interface OutputObject {
    audienceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AudienceEditedEvent {
  export type InputTuple = [
    audienceId: BigNumberish,
    metadataURI: string,
    segmentIds: BigNumberish[]
  ];
  export type OutputTuple = [
    audienceId: bigint,
    metadataURI: string,
    segmentIds: bigint[]
  ];
  export interface OutputObject {
    audienceId: bigint;
    metadataURI: string;
    segmentIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausePublisherEvent {
  export type InputTuple = [publisher: AddressLike];
  export type OutputTuple = [publisher: string];
  export interface OutputObject {
    publisher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublisherRemovedFromWhitelistEvent {
  export type InputTuple = [publisher: AddressLike];
  export type OutputTuple = [publisher: string];
  export interface OutputObject {
    publisher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublisherWhitelistedEvent {
  export type InputTuple = [
    vault: AddressLike,
    publisher: DataTypes.PublisherSettingsStruct
  ];
  export type OutputTuple = [
    vault: string,
    publisher: DataTypes.PublisherSettingsStructOutput
  ];
  export interface OutputObject {
    vault: string;
    publisher: DataTypes.PublisherSettingsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    adId: BigNumberish,
    rewardsDistributed: DataTypes.RewardsDistributionStruct
  ];
  export type OutputTuple = [
    adId: bigint,
    rewardsDistributed: DataTypes.RewardsDistributionStructOutput
  ];
  export interface OutputObject {
    adId: bigint;
    rewardsDistributed: DataTypes.RewardsDistributionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SegmentCreatedEvent {
  export type InputTuple = [
    segmentId: BigNumberish,
    validator: AddressLike,
    query: ICircuitValidator.CircuitQueryStruct,
    metadataURI: string,
    issuer: BigNumberish
  ];
  export type OutputTuple = [
    segmentId: bigint,
    validator: string,
    query: ICircuitValidator.CircuitQueryStructOutput,
    metadataURI: string,
    issuer: bigint
  ];
  export interface OutputObject {
    segmentId: bigint;
    validator: string;
    query: ICircuitValidator.CircuitQueryStructOutput;
    metadataURI: string;
    issuer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SegmentDeletedEvent {
  export type InputTuple = [segmentId: BigNumberish];
  export type OutputTuple = [segmentId: bigint];
  export interface OutputObject {
    segmentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SegmentEditedEvent {
  export type InputTuple = [
    segmentId: BigNumberish,
    validator: AddressLike,
    query: ICircuitValidator.CircuitQueryStruct,
    metadataURI: string
  ];
  export type OutputTuple = [
    segmentId: bigint,
    validator: string,
    query: ICircuitValidator.CircuitQueryStructOutput,
    metadataURI: string
  ];
  export interface OutputObject {
    segmentId: bigint;
    validator: string;
    query: ICircuitValidator.CircuitQueryStructOutput;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausePublisherEvent {
  export type InputTuple = [publisher: AddressLike];
  export type OutputTuple = [publisher: string];
  export interface OutputObject {
    publisher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TargecyEvents extends BaseContract {
  contractName: "TargecyEvents";

  connect(runner?: ContractRunner | null): TargecyEvents;
  waitForDeployment(): Promise<this>;

  interface: TargecyEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AdConsumed"
  ): TypedContractEvent<
    AdConsumedEvent.InputTuple,
    AdConsumedEvent.OutputTuple,
    AdConsumedEvent.OutputObject
  >;
  getEvent(
    key: "AdCreated"
  ): TypedContractEvent<
    AdCreatedEvent.InputTuple,
    AdCreatedEvent.OutputTuple,
    AdCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AdDeleted"
  ): TypedContractEvent<
    AdDeletedEvent.InputTuple,
    AdDeletedEvent.OutputTuple,
    AdDeletedEvent.OutputObject
  >;
  getEvent(
    key: "AdEdited"
  ): TypedContractEvent<
    AdEditedEvent.InputTuple,
    AdEditedEvent.OutputTuple,
    AdEditedEvent.OutputObject
  >;
  getEvent(
    key: "AdPaused"
  ): TypedContractEvent<
    AdPausedEvent.InputTuple,
    AdPausedEvent.OutputTuple,
    AdPausedEvent.OutputObject
  >;
  getEvent(
    key: "AdUnpaused"
  ): TypedContractEvent<
    AdUnpausedEvent.InputTuple,
    AdUnpausedEvent.OutputTuple,
    AdUnpausedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "AdvertiserBudgetFunded"
  ): TypedContractEvent<
    AdvertiserBudgetFundedEvent.InputTuple,
    AdvertiserBudgetFundedEvent.OutputTuple,
    AdvertiserBudgetFundedEvent.OutputObject
  >;
  getEvent(
    key: "AdvertiserBudgetWithdrawn"
  ): TypedContractEvent<
    AdvertiserBudgetWithdrawnEvent.InputTuple,
    AdvertiserBudgetWithdrawnEvent.OutputTuple,
    AdvertiserBudgetWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "AudienceCreated"
  ): TypedContractEvent<
    AudienceCreatedEvent.InputTuple,
    AudienceCreatedEvent.OutputTuple,
    AudienceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AudienceDeleted"
  ): TypedContractEvent<
    AudienceDeletedEvent.InputTuple,
    AudienceDeletedEvent.OutputTuple,
    AudienceDeletedEvent.OutputObject
  >;
  getEvent(
    key: "AudienceEdited"
  ): TypedContractEvent<
    AudienceEditedEvent.InputTuple,
    AudienceEditedEvent.OutputTuple,
    AudienceEditedEvent.OutputObject
  >;
  getEvent(
    key: "PausePublisher"
  ): TypedContractEvent<
    PausePublisherEvent.InputTuple,
    PausePublisherEvent.OutputTuple,
    PausePublisherEvent.OutputObject
  >;
  getEvent(
    key: "PublisherRemovedFromWhitelist"
  ): TypedContractEvent<
    PublisherRemovedFromWhitelistEvent.InputTuple,
    PublisherRemovedFromWhitelistEvent.OutputTuple,
    PublisherRemovedFromWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "PublisherWhitelisted"
  ): TypedContractEvent<
    PublisherWhitelistedEvent.InputTuple,
    PublisherWhitelistedEvent.OutputTuple,
    PublisherWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "SegmentCreated"
  ): TypedContractEvent<
    SegmentCreatedEvent.InputTuple,
    SegmentCreatedEvent.OutputTuple,
    SegmentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SegmentDeleted"
  ): TypedContractEvent<
    SegmentDeletedEvent.InputTuple,
    SegmentDeletedEvent.OutputTuple,
    SegmentDeletedEvent.OutputObject
  >;
  getEvent(
    key: "SegmentEdited"
  ): TypedContractEvent<
    SegmentEditedEvent.InputTuple,
    SegmentEditedEvent.OutputTuple,
    SegmentEditedEvent.OutputObject
  >;
  getEvent(
    key: "UnpausePublisher"
  ): TypedContractEvent<
    UnpausePublisherEvent.InputTuple,
    UnpausePublisherEvent.OutputTuple,
    UnpausePublisherEvent.OutputObject
  >;

  filters: {
    "AdConsumed(uint256,tuple,tuple,uint256)": TypedContractEvent<
      AdConsumedEvent.InputTuple,
      AdConsumedEvent.OutputTuple,
      AdConsumedEvent.OutputObject
    >;
    AdConsumed: TypedContractEvent<
      AdConsumedEvent.InputTuple,
      AdConsumedEvent.OutputTuple,
      AdConsumedEvent.OutputObject
    >;

    "AdCreated(uint256,address,tuple)": TypedContractEvent<
      AdCreatedEvent.InputTuple,
      AdCreatedEvent.OutputTuple,
      AdCreatedEvent.OutputObject
    >;
    AdCreated: TypedContractEvent<
      AdCreatedEvent.InputTuple,
      AdCreatedEvent.OutputTuple,
      AdCreatedEvent.OutputObject
    >;

    "AdDeleted(uint256)": TypedContractEvent<
      AdDeletedEvent.InputTuple,
      AdDeletedEvent.OutputTuple,
      AdDeletedEvent.OutputObject
    >;
    AdDeleted: TypedContractEvent<
      AdDeletedEvent.InputTuple,
      AdDeletedEvent.OutputTuple,
      AdDeletedEvent.OutputObject
    >;

    "AdEdited(uint256,tuple)": TypedContractEvent<
      AdEditedEvent.InputTuple,
      AdEditedEvent.OutputTuple,
      AdEditedEvent.OutputObject
    >;
    AdEdited: TypedContractEvent<
      AdEditedEvent.InputTuple,
      AdEditedEvent.OutputTuple,
      AdEditedEvent.OutputObject
    >;

    "AdPaused(uint256)": TypedContractEvent<
      AdPausedEvent.InputTuple,
      AdPausedEvent.OutputTuple,
      AdPausedEvent.OutputObject
    >;
    AdPaused: TypedContractEvent<
      AdPausedEvent.InputTuple,
      AdPausedEvent.OutputTuple,
      AdPausedEvent.OutputObject
    >;

    "AdUnpaused(uint256)": TypedContractEvent<
      AdUnpausedEvent.InputTuple,
      AdUnpausedEvent.OutputTuple,
      AdUnpausedEvent.OutputObject
    >;
    AdUnpaused: TypedContractEvent<
      AdUnpausedEvent.InputTuple,
      AdUnpausedEvent.OutputTuple,
      AdUnpausedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "AdvertiserBudgetFunded(address,uint256)": TypedContractEvent<
      AdvertiserBudgetFundedEvent.InputTuple,
      AdvertiserBudgetFundedEvent.OutputTuple,
      AdvertiserBudgetFundedEvent.OutputObject
    >;
    AdvertiserBudgetFunded: TypedContractEvent<
      AdvertiserBudgetFundedEvent.InputTuple,
      AdvertiserBudgetFundedEvent.OutputTuple,
      AdvertiserBudgetFundedEvent.OutputObject
    >;

    "AdvertiserBudgetWithdrawn(address,uint256)": TypedContractEvent<
      AdvertiserBudgetWithdrawnEvent.InputTuple,
      AdvertiserBudgetWithdrawnEvent.OutputTuple,
      AdvertiserBudgetWithdrawnEvent.OutputObject
    >;
    AdvertiserBudgetWithdrawn: TypedContractEvent<
      AdvertiserBudgetWithdrawnEvent.InputTuple,
      AdvertiserBudgetWithdrawnEvent.OutputTuple,
      AdvertiserBudgetWithdrawnEvent.OutputObject
    >;

    "AudienceCreated(uint256,string,uint256[])": TypedContractEvent<
      AudienceCreatedEvent.InputTuple,
      AudienceCreatedEvent.OutputTuple,
      AudienceCreatedEvent.OutputObject
    >;
    AudienceCreated: TypedContractEvent<
      AudienceCreatedEvent.InputTuple,
      AudienceCreatedEvent.OutputTuple,
      AudienceCreatedEvent.OutputObject
    >;

    "AudienceDeleted(uint256)": TypedContractEvent<
      AudienceDeletedEvent.InputTuple,
      AudienceDeletedEvent.OutputTuple,
      AudienceDeletedEvent.OutputObject
    >;
    AudienceDeleted: TypedContractEvent<
      AudienceDeletedEvent.InputTuple,
      AudienceDeletedEvent.OutputTuple,
      AudienceDeletedEvent.OutputObject
    >;

    "AudienceEdited(uint256,string,uint256[])": TypedContractEvent<
      AudienceEditedEvent.InputTuple,
      AudienceEditedEvent.OutputTuple,
      AudienceEditedEvent.OutputObject
    >;
    AudienceEdited: TypedContractEvent<
      AudienceEditedEvent.InputTuple,
      AudienceEditedEvent.OutputTuple,
      AudienceEditedEvent.OutputObject
    >;

    "PausePublisher(address)": TypedContractEvent<
      PausePublisherEvent.InputTuple,
      PausePublisherEvent.OutputTuple,
      PausePublisherEvent.OutputObject
    >;
    PausePublisher: TypedContractEvent<
      PausePublisherEvent.InputTuple,
      PausePublisherEvent.OutputTuple,
      PausePublisherEvent.OutputObject
    >;

    "PublisherRemovedFromWhitelist(address)": TypedContractEvent<
      PublisherRemovedFromWhitelistEvent.InputTuple,
      PublisherRemovedFromWhitelistEvent.OutputTuple,
      PublisherRemovedFromWhitelistEvent.OutputObject
    >;
    PublisherRemovedFromWhitelist: TypedContractEvent<
      PublisherRemovedFromWhitelistEvent.InputTuple,
      PublisherRemovedFromWhitelistEvent.OutputTuple,
      PublisherRemovedFromWhitelistEvent.OutputObject
    >;

    "PublisherWhitelisted(address,tuple)": TypedContractEvent<
      PublisherWhitelistedEvent.InputTuple,
      PublisherWhitelistedEvent.OutputTuple,
      PublisherWhitelistedEvent.OutputObject
    >;
    PublisherWhitelisted: TypedContractEvent<
      PublisherWhitelistedEvent.InputTuple,
      PublisherWhitelistedEvent.OutputTuple,
      PublisherWhitelistedEvent.OutputObject
    >;

    "RewardsDistributed(uint256,tuple)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "SegmentCreated(uint256,address,tuple,string,uint256)": TypedContractEvent<
      SegmentCreatedEvent.InputTuple,
      SegmentCreatedEvent.OutputTuple,
      SegmentCreatedEvent.OutputObject
    >;
    SegmentCreated: TypedContractEvent<
      SegmentCreatedEvent.InputTuple,
      SegmentCreatedEvent.OutputTuple,
      SegmentCreatedEvent.OutputObject
    >;

    "SegmentDeleted(uint256)": TypedContractEvent<
      SegmentDeletedEvent.InputTuple,
      SegmentDeletedEvent.OutputTuple,
      SegmentDeletedEvent.OutputObject
    >;
    SegmentDeleted: TypedContractEvent<
      SegmentDeletedEvent.InputTuple,
      SegmentDeletedEvent.OutputTuple,
      SegmentDeletedEvent.OutputObject
    >;

    "SegmentEdited(uint256,address,tuple,string)": TypedContractEvent<
      SegmentEditedEvent.InputTuple,
      SegmentEditedEvent.OutputTuple,
      SegmentEditedEvent.OutputObject
    >;
    SegmentEdited: TypedContractEvent<
      SegmentEditedEvent.InputTuple,
      SegmentEditedEvent.OutputTuple,
      SegmentEditedEvent.OutputObject
    >;

    "UnpausePublisher(address)": TypedContractEvent<
      UnpausePublisherEvent.InputTuple,
      UnpausePublisherEvent.OutputTuple,
      UnpausePublisherEvent.OutputObject
    >;
    UnpausePublisher: TypedContractEvent<
      UnpausePublisherEvent.InputTuple,
      UnpausePublisherEvent.OutputTuple,
      UnpausePublisherEvent.OutputObject
    >;
  };
}
