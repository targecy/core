/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common';

export declare namespace ICircuitValidator {
  export type CircuitQueryStruct = {
    schema: PromiseOrValue<BigNumberish>;
    slotIndex: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>[];
    circuitId: PromiseOrValue<string>;
  };

  export type CircuitQueryStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber[], string] & {
    schema: BigNumber;
    slotIndex: BigNumber;
    operator: BigNumber;
    value: BigNumber[];
    circuitId: string;
  };
}

export interface TargecyStorageInterface extends utils.Interface {
  functions: {
    '_adId()': FunctionFragment;
    '_targetGroupId()': FunctionFragment;
    '_zkRequestId()': FunctionFragment;
    'ads(uint256)': FunctionFragment;
    'customImpressionPrices(address)': FunctionFragment;
    'defaultImpressionPrice()': FunctionFragment;
    'protocolVault()': FunctionFragment;
    'requestQueries(uint256)': FunctionFragment;
    'targetGroupIds(uint256)': FunctionFragment;
    'totalImpressions()': FunctionFragment;
    'whitelistedPublishers(address)': FunctionFragment;
    'zkProofsValidator()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_adId'
      | '_targetGroupId'
      | '_zkRequestId'
      | 'ads'
      | 'customImpressionPrices'
      | 'defaultImpressionPrice'
      | 'protocolVault'
      | 'requestQueries'
      | 'targetGroupIds'
      | 'totalImpressions'
      | 'whitelistedPublishers'
      | 'zkProofsValidator'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_adId', values?: undefined): string;
  encodeFunctionData(functionFragment: '_targetGroupId', values?: undefined): string;
  encodeFunctionData(functionFragment: '_zkRequestId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ads', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'customImpressionPrices', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'defaultImpressionPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requestQueries', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'targetGroupIds', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalImpressions', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistedPublishers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'zkProofsValidator', values?: undefined): string;

  decodeFunctionResult(functionFragment: '_adId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_targetGroupId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_zkRequestId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ads', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'customImpressionPrices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultImpressionPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestQueries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'targetGroupIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalImpressions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistedPublishers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'zkProofsValidator', data: BytesLike): Result;

  events: {};
}

export interface TargecyStorage extends BaseContract {
  contractName: 'TargecyStorage';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TargecyStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _adId(overrides?: CallOverrides): Promise<[BigNumber]>;

    _targetGroupId(overrides?: CallOverrides): Promise<[BigNumber]>;

    _zkRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    ads(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        advertiser: string;
        metadataURI: string;
        totalBudget: BigNumber;
        remainingBudget: BigNumber;
        maxImpressionPrice: BigNumber;
        minBlock: BigNumber;
        maxBlock: BigNumber;
        impressions: BigNumber;
      }
    >;

    customImpressionPrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultImpressionPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolVault(overrides?: CallOverrides): Promise<[string]>;

    requestQueries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, ICircuitValidator.CircuitQueryStructOutput, string] & {
        validator: string;
        query: ICircuitValidator.CircuitQueryStructOutput;
        metadataURI: string;
      }
    >;

    targetGroupIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { metadataURI: string; impressions: BigNumber }>;

    totalImpressions(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistedPublishers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    zkProofsValidator(overrides?: CallOverrides): Promise<[string]>;
  };

  _adId(overrides?: CallOverrides): Promise<BigNumber>;

  _targetGroupId(overrides?: CallOverrides): Promise<BigNumber>;

  _zkRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  ads(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      advertiser: string;
      metadataURI: string;
      totalBudget: BigNumber;
      remainingBudget: BigNumber;
      maxImpressionPrice: BigNumber;
      minBlock: BigNumber;
      maxBlock: BigNumber;
      impressions: BigNumber;
    }
  >;

  customImpressionPrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  defaultImpressionPrice(overrides?: CallOverrides): Promise<BigNumber>;

  protocolVault(overrides?: CallOverrides): Promise<string>;

  requestQueries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, ICircuitValidator.CircuitQueryStructOutput, string] & {
      validator: string;
      query: ICircuitValidator.CircuitQueryStructOutput;
      metadataURI: string;
    }
  >;

  targetGroupIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { metadataURI: string; impressions: BigNumber }>;

  totalImpressions(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistedPublishers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  zkProofsValidator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _adId(overrides?: CallOverrides): Promise<BigNumber>;

    _targetGroupId(overrides?: CallOverrides): Promise<BigNumber>;

    _zkRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    ads(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        advertiser: string;
        metadataURI: string;
        totalBudget: BigNumber;
        remainingBudget: BigNumber;
        maxImpressionPrice: BigNumber;
        minBlock: BigNumber;
        maxBlock: BigNumber;
        impressions: BigNumber;
      }
    >;

    customImpressionPrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    defaultImpressionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    protocolVault(overrides?: CallOverrides): Promise<string>;

    requestQueries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, ICircuitValidator.CircuitQueryStructOutput, string] & {
        validator: string;
        query: ICircuitValidator.CircuitQueryStructOutput;
        metadataURI: string;
      }
    >;

    targetGroupIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { metadataURI: string; impressions: BigNumber }>;

    totalImpressions(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedPublishers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    zkProofsValidator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _adId(overrides?: CallOverrides): Promise<BigNumber>;

    _targetGroupId(overrides?: CallOverrides): Promise<BigNumber>;

    _zkRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    ads(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    customImpressionPrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    defaultImpressionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    protocolVault(overrides?: CallOverrides): Promise<BigNumber>;

    requestQueries(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    targetGroupIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalImpressions(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedPublishers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    zkProofsValidator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _adId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _targetGroupId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _zkRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ads(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    customImpressionPrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultImpressionPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestQueries(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetGroupIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalImpressions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedPublishers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zkProofsValidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
