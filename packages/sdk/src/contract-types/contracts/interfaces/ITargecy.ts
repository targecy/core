/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common';

export declare namespace DataTypes {
  export type PublisherRewardsStruct = {
    percentage: PromiseOrValue<BigNumberish>;
    publisherVault: PromiseOrValue<string>;
  };

  export type PublisherRewardsStructOutput = [BigNumber, string] & {
    percentage: BigNumber;
    publisherVault: string;
  };

  export type ZKProofsStruct = {
    inputs: PromiseOrValue<BigNumberish>[][];
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][];
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ][];
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][];
  };

  export type ZKProofsStructOutput = [
    BigNumber[][],
    [BigNumber, BigNumber][],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]][],
    [BigNumber, BigNumber][]
  ] & {
    inputs: BigNumber[][];
    a: [BigNumber, BigNumber][];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]][];
    c: [BigNumber, BigNumber][];
  };

  export type NewAdStruct = {
    metadataURI: PromiseOrValue<string>;
    budget: PromiseOrValue<BigNumberish>;
    maxImpressionPrice: PromiseOrValue<BigNumberish>;
    minBlock: PromiseOrValue<BigNumberish>;
    maxBlock: PromiseOrValue<BigNumberish>;
    targetGroupIds: PromiseOrValue<BigNumberish>[];
  };

  export type NewAdStructOutput = [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[]] & {
    metadataURI: string;
    budget: BigNumber;
    maxImpressionPrice: BigNumber;
    minBlock: BigNumber;
    maxBlock: BigNumber;
    targetGroupIds: BigNumber[];
  };

  export type ZKPRequestStruct = {
    validator: PromiseOrValue<string>;
    query: ICircuitValidator.CircuitQueryStruct;
    metadataURI: PromiseOrValue<string>;
  };

  export type ZKPRequestStructOutput = [string, ICircuitValidator.CircuitQueryStructOutput, string] & {
    validator: string;
    query: ICircuitValidator.CircuitQueryStructOutput;
    metadataURI: string;
  };
}

export declare namespace ICircuitValidator {
  export type CircuitQueryStruct = {
    schema: PromiseOrValue<BigNumberish>;
    slotIndex: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>[];
    circuitId: PromiseOrValue<string>;
  };

  export type CircuitQueryStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber[], string] & {
    schema: BigNumber;
    slotIndex: BigNumber;
    operator: BigNumber;
    value: BigNumber[];
    circuitId: string;
  };
}

export interface ITargecyInterface extends utils.Interface {
  functions: {
    'consumeAd(uint64,(uint256,address),(uint256[][],uint256[2][],uint256[2][2][],uint256[2][]))': FunctionFragment;
    'createAd((string,uint256,uint256,uint256,uint256,uint256[]))': FunctionFragment;
    'createTargetGroup(string,uint256[])': FunctionFragment;
    'deleteAd(uint256)': FunctionFragment;
    'deleteTargetGroup(uint256)': FunctionFragment;
    'editAd(uint256,(string,uint256,uint256,uint256,uint256,uint256[]))': FunctionFragment;
    'editTargetGroup(uint256,string,uint256[])': FunctionFragment;
    'setDefaultImpressionPrice(uint256)': FunctionFragment;
    'setProtocolVault(address)': FunctionFragment;
    'setZKPRequest((address,(uint256,uint256,uint256,uint256[],string),string))': FunctionFragment;
    'setZKProofsValidator(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'consumeAd'
      | 'createAd'
      | 'createTargetGroup'
      | 'deleteAd'
      | 'deleteTargetGroup'
      | 'editAd'
      | 'editTargetGroup'
      | 'setDefaultImpressionPrice'
      | 'setProtocolVault'
      | 'setZKPRequest'
      | 'setZKProofsValidator'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'consumeAd',
    values: [PromiseOrValue<BigNumberish>, DataTypes.PublisherRewardsStruct, DataTypes.ZKProofsStruct]
  ): string;
  encodeFunctionData(functionFragment: 'createAd', values: [DataTypes.NewAdStruct]): string;
  encodeFunctionData(
    functionFragment: 'createTargetGroup',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: 'deleteAd', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'deleteTargetGroup', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'editAd', values: [PromiseOrValue<BigNumberish>, DataTypes.NewAdStruct]): string;
  encodeFunctionData(
    functionFragment: 'editTargetGroup',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: 'setDefaultImpressionPrice', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setProtocolVault', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setZKPRequest', values: [DataTypes.ZKPRequestStruct]): string;
  encodeFunctionData(functionFragment: 'setZKProofsValidator', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'consumeAd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createAd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createTargetGroup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deleteAd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deleteTargetGroup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'editAd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'editTargetGroup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDefaultImpressionPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProtocolVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setZKPRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setZKProofsValidator', data: BytesLike): Result;

  events: {};
}

export interface ITargecy extends BaseContract {
  contractName: 'ITargecy';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITargecyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    consumeAd(
      adId: PromiseOrValue<BigNumberish>,
      publisher: DataTypes.PublisherRewardsStruct,
      zkProofs: DataTypes.ZKProofsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAd(
      ad: DataTypes.NewAdStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTargetGroup(
      metadataURI: PromiseOrValue<string>,
      zkRequestIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteAd(
      adId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteTargetGroup(
      targetGroupId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editAd(
      adId: PromiseOrValue<BigNumberish>,
      ad: DataTypes.NewAdStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editTargetGroup(
      targetGroupId: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      zkRequestIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultImpressionPrice(
      _defaultImpressionPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolVault(
      _protocolVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setZKPRequest(
      _zkpRequest: DataTypes.ZKPRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setZKProofsValidator(
      _zkProofsValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  consumeAd(
    adId: PromiseOrValue<BigNumberish>,
    publisher: DataTypes.PublisherRewardsStruct,
    zkProofs: DataTypes.ZKProofsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAd(
    ad: DataTypes.NewAdStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTargetGroup(
    metadataURI: PromiseOrValue<string>,
    zkRequestIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteAd(
    adId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteTargetGroup(
    targetGroupId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editAd(
    adId: PromiseOrValue<BigNumberish>,
    ad: DataTypes.NewAdStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editTargetGroup(
    targetGroupId: PromiseOrValue<BigNumberish>,
    metadataURI: PromiseOrValue<string>,
    zkRequestIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultImpressionPrice(
    _defaultImpressionPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolVault(
    _protocolVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setZKPRequest(
    _zkpRequest: DataTypes.ZKPRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setZKProofsValidator(
    _zkProofsValidator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    consumeAd(
      adId: PromiseOrValue<BigNumberish>,
      publisher: DataTypes.PublisherRewardsStruct,
      zkProofs: DataTypes.ZKProofsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createAd(ad: DataTypes.NewAdStruct, overrides?: CallOverrides): Promise<void>;

    createTargetGroup(
      metadataURI: PromiseOrValue<string>,
      zkRequestIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deleteAd(adId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    deleteTargetGroup(targetGroupId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    editAd(adId: PromiseOrValue<BigNumberish>, ad: DataTypes.NewAdStruct, overrides?: CallOverrides): Promise<void>;

    editTargetGroup(
      targetGroupId: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      zkRequestIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultImpressionPrice(
      _defaultImpressionPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolVault(_protocolVault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setZKPRequest(_zkpRequest: DataTypes.ZKPRequestStruct, overrides?: CallOverrides): Promise<void>;

    setZKProofsValidator(_zkProofsValidator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    consumeAd(
      adId: PromiseOrValue<BigNumberish>,
      publisher: DataTypes.PublisherRewardsStruct,
      zkProofs: DataTypes.ZKProofsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAd(
      ad: DataTypes.NewAdStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTargetGroup(
      metadataURI: PromiseOrValue<string>,
      zkRequestIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteAd(
      adId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteTargetGroup(
      targetGroupId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editAd(
      adId: PromiseOrValue<BigNumberish>,
      ad: DataTypes.NewAdStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editTargetGroup(
      targetGroupId: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      zkRequestIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultImpressionPrice(
      _defaultImpressionPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolVault(
      _protocolVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setZKPRequest(
      _zkpRequest: DataTypes.ZKPRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setZKProofsValidator(
      _zkProofsValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consumeAd(
      adId: PromiseOrValue<BigNumberish>,
      publisher: DataTypes.PublisherRewardsStruct,
      zkProofs: DataTypes.ZKProofsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAd(
      ad: DataTypes.NewAdStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTargetGroup(
      metadataURI: PromiseOrValue<string>,
      zkRequestIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteAd(
      adId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteTargetGroup(
      targetGroupId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editAd(
      adId: PromiseOrValue<BigNumberish>,
      ad: DataTypes.NewAdStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editTargetGroup(
      targetGroupId: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      zkRequestIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultImpressionPrice(
      _defaultImpressionPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolVault(
      _protocolVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setZKPRequest(
      _zkpRequest: DataTypes.ZKPRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setZKProofsValidator(
      _zkProofsValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
