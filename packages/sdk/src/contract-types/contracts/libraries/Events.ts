/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BigNumberish, Signer, utils } from 'ethers';
import type { EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common';

export declare namespace ICircuitValidator {
  export type CircuitQueryStruct = {
    schema: PromiseOrValue<BigNumberish>;
    slotIndex: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>[];
    circuitId: PromiseOrValue<string>;
  };

  export type CircuitQueryStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber[], string] & {
    schema: BigNumber;
    slotIndex: BigNumber;
    operator: BigNumber;
    value: BigNumber[];
    circuitId: string;
  };
}

export interface EventsInterface extends utils.Interface {
  functions: {};

  events: {
    'AdConsumed(uint256,address,address)': EventFragment;
    'AdCreated(uint256,string,uint256,uint256[])': EventFragment;
    'AdDeleted(uint256)': EventFragment;
    'AdEdited(uint256,string,uint256,uint256[])': EventFragment;
    'TargetGroupCreated(uint256,string,uint256[])': EventFragment;
    'TargetGroupDeleted(uint256)': EventFragment;
    'TargetGroupEdited(uint256,string,uint256[])': EventFragment;
    'ZKPRequestCreated(uint256,address,tuple,string)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdConsumed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdDeleted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdEdited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TargetGroupCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TargetGroupDeleted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TargetGroupEdited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ZKPRequestCreated'): EventFragment;
}

export interface AdConsumedEventObject {
  adId: BigNumber;
  user: string;
  publisher: string;
}
export type AdConsumedEvent = TypedEvent<[BigNumber, string, string], AdConsumedEventObject>;

export type AdConsumedEventFilter = TypedEventFilter<AdConsumedEvent>;

export interface AdCreatedEventObject {
  adId: BigNumber;
  metadataURI: string;
  budget: BigNumber;
  targetGroupIds: BigNumber[];
}
export type AdCreatedEvent = TypedEvent<[BigNumber, string, BigNumber, BigNumber[]], AdCreatedEventObject>;

export type AdCreatedEventFilter = TypedEventFilter<AdCreatedEvent>;

export interface AdDeletedEventObject {
  adId: BigNumber;
}
export type AdDeletedEvent = TypedEvent<[BigNumber], AdDeletedEventObject>;

export type AdDeletedEventFilter = TypedEventFilter<AdDeletedEvent>;

export interface AdEditedEventObject {
  adId: BigNumber;
  metadataURI: string;
  budget: BigNumber;
  targetGroupIds: BigNumber[];
}
export type AdEditedEvent = TypedEvent<[BigNumber, string, BigNumber, BigNumber[]], AdEditedEventObject>;

export type AdEditedEventFilter = TypedEventFilter<AdEditedEvent>;

export interface TargetGroupCreatedEventObject {
  targetGroupId: BigNumber;
  metadataURI: string;
  zkRequestIds: BigNumber[];
}
export type TargetGroupCreatedEvent = TypedEvent<[BigNumber, string, BigNumber[]], TargetGroupCreatedEventObject>;

export type TargetGroupCreatedEventFilter = TypedEventFilter<TargetGroupCreatedEvent>;

export interface TargetGroupDeletedEventObject {
  targetGroupId: BigNumber;
}
export type TargetGroupDeletedEvent = TypedEvent<[BigNumber], TargetGroupDeletedEventObject>;

export type TargetGroupDeletedEventFilter = TypedEventFilter<TargetGroupDeletedEvent>;

export interface TargetGroupEditedEventObject {
  targetGroupId: BigNumber;
  metadataURI: string;
  zkRequestIds: BigNumber[];
}
export type TargetGroupEditedEvent = TypedEvent<[BigNumber, string, BigNumber[]], TargetGroupEditedEventObject>;

export type TargetGroupEditedEventFilter = TypedEventFilter<TargetGroupEditedEvent>;

export interface ZKPRequestCreatedEventObject {
  zkRequestId: BigNumber;
  validator: string;
  query: ICircuitValidator.CircuitQueryStructOutput;
  metadataURI: string;
}
export type ZKPRequestCreatedEvent = TypedEvent<
  [BigNumber, string, ICircuitValidator.CircuitQueryStructOutput, string],
  ZKPRequestCreatedEventObject
>;

export type ZKPRequestCreatedEventFilter = TypedEventFilter<ZKPRequestCreatedEvent>;

export interface Events extends BaseContract {
  contractName: 'Events';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    'AdConsumed(uint256,address,address)'(
      adId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null
    ): AdConsumedEventFilter;
    AdConsumed(
      adId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null
    ): AdConsumedEventFilter;

    'AdCreated(uint256,string,uint256,uint256[])'(
      adId?: PromiseOrValue<BigNumberish> | null,
      metadataURI?: null,
      budget?: null,
      targetGroupIds?: null
    ): AdCreatedEventFilter;
    AdCreated(
      adId?: PromiseOrValue<BigNumberish> | null,
      metadataURI?: null,
      budget?: null,
      targetGroupIds?: null
    ): AdCreatedEventFilter;

    'AdDeleted(uint256)'(adId?: PromiseOrValue<BigNumberish> | null): AdDeletedEventFilter;
    AdDeleted(adId?: PromiseOrValue<BigNumberish> | null): AdDeletedEventFilter;

    'AdEdited(uint256,string,uint256,uint256[])'(
      adId?: PromiseOrValue<BigNumberish> | null,
      metadataURI?: null,
      budget?: null,
      targetGroupIds?: null
    ): AdEditedEventFilter;
    AdEdited(
      adId?: PromiseOrValue<BigNumberish> | null,
      metadataURI?: null,
      budget?: null,
      targetGroupIds?: null
    ): AdEditedEventFilter;

    'TargetGroupCreated(uint256,string,uint256[])'(
      targetGroupId?: PromiseOrValue<BigNumberish> | null,
      metadataURI?: null,
      zkRequestIds?: null
    ): TargetGroupCreatedEventFilter;
    TargetGroupCreated(
      targetGroupId?: PromiseOrValue<BigNumberish> | null,
      metadataURI?: null,
      zkRequestIds?: null
    ): TargetGroupCreatedEventFilter;

    'TargetGroupDeleted(uint256)'(targetGroupId?: PromiseOrValue<BigNumberish> | null): TargetGroupDeletedEventFilter;
    TargetGroupDeleted(targetGroupId?: PromiseOrValue<BigNumberish> | null): TargetGroupDeletedEventFilter;

    'TargetGroupEdited(uint256,string,uint256[])'(
      targetGroupId?: PromiseOrValue<BigNumberish> | null,
      metadataURI?: null,
      zkRequestIds?: null
    ): TargetGroupEditedEventFilter;
    TargetGroupEdited(
      targetGroupId?: PromiseOrValue<BigNumberish> | null,
      metadataURI?: null,
      zkRequestIds?: null
    ): TargetGroupEditedEventFilter;

    'ZKPRequestCreated(uint256,address,tuple,string)'(
      zkRequestId?: PromiseOrValue<BigNumberish> | null,
      validator?: PromiseOrValue<string> | null,
      query?: null,
      metadataURI?: null
    ): ZKPRequestCreatedEventFilter;
    ZKPRequestCreated(
      zkRequestId?: PromiseOrValue<BigNumberish> | null,
      validator?: PromiseOrValue<string> | null,
      query?: null,
      metadataURI?: null
    ): ZKPRequestCreatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
