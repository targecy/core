/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { ITargecy, ITargecyInterface } from '../../../contracts/interfaces/ITargecy';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'adId',
        type: 'uint64',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'percentage',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'publisherVault',
            type: 'address',
          },
        ],
        internalType: 'struct DataTypes.PublisherRewards',
        name: 'publisher',
        type: 'tuple',
      },
      {
        components: [
          {
            internalType: 'uint256[][]',
            name: 'inputs',
            type: 'uint256[][]',
          },
          {
            internalType: 'uint256[2][]',
            name: 'a',
            type: 'uint256[2][]',
          },
          {
            internalType: 'uint256[2][2][]',
            name: 'b',
            type: 'uint256[2][2][]',
          },
          {
            internalType: 'uint256[2][]',
            name: 'c',
            type: 'uint256[2][]',
          },
        ],
        internalType: 'struct DataTypes.ZKProofs',
        name: 'zkProofs',
        type: 'tuple',
      },
    ],
    name: 'consumeAd',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'metadataURI',
            type: 'string',
          },
          {
            internalType: 'uint256',
            name: 'budget',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maxImpressionPrice',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'minBlock',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maxBlock',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'targetGroupIds',
            type: 'uint256[]',
          },
        ],
        internalType: 'struct DataTypes.NewAd',
        name: 'ad',
        type: 'tuple',
      },
    ],
    name: 'createAd',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
      {
        internalType: 'uint256[]',
        name: 'zkRequestIds',
        type: 'uint256[]',
      },
    ],
    name: 'createTargetGroup',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'adId',
        type: 'uint256',
      },
    ],
    name: 'deleteAd',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'targetGroupId',
        type: 'uint256',
      },
    ],
    name: 'deleteTargetGroup',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'adId',
        type: 'uint256',
      },
      {
        components: [
          {
            internalType: 'string',
            name: 'metadataURI',
            type: 'string',
          },
          {
            internalType: 'uint256',
            name: 'budget',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maxImpressionPrice',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'minBlock',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maxBlock',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'targetGroupIds',
            type: 'uint256[]',
          },
        ],
        internalType: 'struct DataTypes.NewAd',
        name: 'ad',
        type: 'tuple',
      },
    ],
    name: 'editAd',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'targetGroupId',
        type: 'uint256',
      },
      {
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
      {
        internalType: 'uint256[]',
        name: 'zkRequestIds',
        type: 'uint256[]',
      },
    ],
    name: 'editTargetGroup',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_defaultImpressionPrice',
        type: 'uint256',
      },
    ],
    name: 'setDefaultImpressionPrice',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_protocolVault',
        type: 'address',
      },
    ],
    name: 'setProtocolVault',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'contract ICircuitValidator',
            name: 'validator',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'schema',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'slotIndex',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'operator',
                type: 'uint256',
              },
              {
                internalType: 'uint256[]',
                name: 'value',
                type: 'uint256[]',
              },
              {
                internalType: 'string',
                name: 'circuitId',
                type: 'string',
              },
            ],
            internalType: 'struct ICircuitValidator.CircuitQuery',
            name: 'query',
            type: 'tuple',
          },
          {
            internalType: 'string',
            name: 'metadataURI',
            type: 'string',
          },
        ],
        internalType: 'struct DataTypes.ZKPRequest',
        name: '_zkpRequest',
        type: 'tuple',
      },
    ],
    name: 'setZKPRequest',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_zkProofsValidator',
        type: 'address',
      },
    ],
    name: 'setZKProofsValidator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class ITargecy__factory {
  static readonly abi = _abi;
  static createInterface(): ITargecyInterface {
    return new utils.Interface(_abi) as ITargecyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ITargecy {
    return new Contract(address, _abi, signerOrProvider) as ITargecy;
  }
}
