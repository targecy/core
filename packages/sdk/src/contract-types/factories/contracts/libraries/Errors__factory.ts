/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../common';
import type { Errors, ErrorsInterface } from '../../../contracts/libraries/Errors';

const _abi = [
  {
    inputs: [],
    name: 'AdConsumed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'AdNotAvailable',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ImpressionPriceTooHigh',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InsufficientFunds',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidNewBudget',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidProofs',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidZKProof',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidZKProofsInput',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidZKProofsLength',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotAdvertiser',
    type: 'error',
  },
  {
    inputs: [],
    name: 'PercentageTooBig',
    type: 'error',
  },
  {
    inputs: [],
    name: 'PercentageTotalTooSmall',
    type: 'error',
  },
  {
    inputs: [],
    name: 'PublisherNotWhitelisted',
    type: 'error',
  },
  {
    inputs: [],
    name: 'PublisherPercentageTooBig',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SignatureExpired',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SignatureInvalid',
    type: 'error',
  },
  {
    inputs: [],
    name: 'UseConsumeAdMethodInstead',
    type: 'error',
  },
];

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122026e4e69ec18a42300fee481952de79fa0bd8a76d2fd5b1d50eeb6aa1b0df14da64736f6c634300080a0033';

type ErrorsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: ErrorsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Errors';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }
  static readonly contractName: 'Errors';

  public readonly contractName: 'Errors';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
