/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../common';
import type { Events, EventsInterface } from '../../../contracts/libraries/Events';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'adId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'publisher',
        type: 'address',
      },
    ],
    name: 'AdConsumed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'adId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'budget',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256[]',
        name: 'targetGroupIds',
        type: 'uint256[]',
      },
    ],
    name: 'AdCreated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'adId',
        type: 'uint256',
      },
    ],
    name: 'AdDeleted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'adId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'budget',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256[]',
        name: 'targetGroupIds',
        type: 'uint256[]',
      },
    ],
    name: 'AdEdited',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'targetGroupId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
      {
        indexed: false,
        internalType: 'uint256[]',
        name: 'zkRequestIds',
        type: 'uint256[]',
      },
    ],
    name: 'TargetGroupCreated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'targetGroupId',
        type: 'uint256',
      },
    ],
    name: 'TargetGroupDeleted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'targetGroupId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
      {
        indexed: false,
        internalType: 'uint256[]',
        name: 'zkRequestIds',
        type: 'uint256[]',
      },
    ],
    name: 'TargetGroupEdited',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'zkRequestId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'validator',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'schema',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'slotIndex',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'operator',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'value',
            type: 'uint256[]',
          },
          {
            internalType: 'string',
            name: 'circuitId',
            type: 'string',
          },
        ],
        indexed: false,
        internalType: 'struct ICircuitValidator.CircuitQuery',
        name: 'query',
        type: 'tuple',
      },
      {
        indexed: false,
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
    ],
    name: 'ZKPRequestCreated',
    type: 'event',
  },
];

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122068ccf16b7e07956e11aa163e7cbc2cbf688141500c743dc5d3bee2eb0d1a529d64736f6c634300080a0033';

type EventsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: EventsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Events__factory extends ContractFactory {
  constructor(...args: EventsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Events';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Events> {
    return super.deploy(overrides || {}) as Promise<Events>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Events {
    return super.attach(address) as Events;
  }
  override connect(signer: Signer): Events__factory {
    return super.connect(signer) as Events__factory;
  }
  static readonly contractName: 'Events';

  public readonly contractName: 'Events';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EventsInterface {
    return new utils.Interface(_abi) as EventsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Events {
    return new Contract(address, _abi, signerOrProvider) as Events;
  }
}
