/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { TargecyStorage, TargecyStorageInterface } from '../../../../contracts/core/storage/TargecyStorage';

const _abi = [
  {
    inputs: [],
    name: '_adId',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_targetGroupId',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_zkRequestId',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'ads',
    outputs: [
      {
        internalType: 'address',
        name: 'advertiser',
        type: 'address',
      },
      {
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'totalBudget',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'remainingBudget',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'maxImpressionPrice',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'minBlock',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'maxBlock',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'impressions',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'customImpressionPrices',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'defaultImpressionPrice',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocolVault',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'requestQueries',
    outputs: [
      {
        internalType: 'contract ICircuitValidator',
        name: 'validator',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'schema',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'slotIndex',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'operator',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'value',
            type: 'uint256[]',
          },
          {
            internalType: 'string',
            name: 'circuitId',
            type: 'string',
          },
        ],
        internalType: 'struct ICircuitValidator.CircuitQuery',
        name: 'query',
        type: 'tuple',
      },
      {
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'targetGroupIds',
    outputs: [
      {
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'impressions',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalImpressions',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'whitelistedPublishers',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'zkProofsValidator',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

export class TargecyStorage__factory {
  static readonly abi = _abi;
  static createInterface(): TargecyStorageInterface {
    return new utils.Interface(_abi) as TargecyStorageInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TargecyStorage {
    return new Contract(address, _abi, signerOrProvider) as TargecyStorage;
  }
}
