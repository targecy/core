{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/core/storage/TargecyStorage.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.10;\n\nimport { DataTypes } from \"../../libraries/DataTypes.sol\";\nimport { ICircuitValidator } from \"../../interfaces/ICircuitValidator.sol\";\n\nabstract contract TargecyStorage {\n  address public zkProofsValidator;\n  address public protocolVault;\n  address public relayerAddress;\n\n  uint256 public _segmentId;\n  uint256 public _adId;\n  uint256 public _audienceId;\n  uint256 public totalconsumptions;\n\n  uint256 public defaultImpressionPrice;\n  uint256 public defaultClickPrice;\n  uint256 public defaultConversionPrice;\n  uint256 public defaultIssuer;\n\n  mapping(uint256 => bool) public usedSigNonces;\n  mapping(uint256 => mapping(uint256 => uint256)) public consumptionsPerDay;\n\n  mapping(address => bool) public whitelistedPublishers;\n  mapping(uint256 => DataTypes.Ad) public ads;\n  mapping(uint256 => DataTypes.Audience) public audiences;\n  mapping(uint256 => DataTypes.Segment) public requestQueries;\n}\n"
    },
    "contracts/core/Targecy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.10;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { PausableUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { AccessControlUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\nimport { ITargecy } from \"../interfaces/ITargecy.sol\";\nimport { TargecyStorage } from \"./storage/TargecyStorage.sol\";\nimport { TargecyEvents } from \"../libraries/TargecyEvents.sol\";\nimport { DataTypes } from \"../libraries/DataTypes.sol\";\nimport { Constants } from \"../libraries/Constants.sol\";\nimport { Helpers } from \"../libraries/Helpers.sol\";\nimport { Errors } from \"../libraries/Errors.sol\";\nimport { ICircuitValidator } from \"../interfaces/ICircuitValidator.sol\";\n\ncontract Targecy is Initializable, AccessControlUpgradeable, PausableUpgradeable, TargecyStorage, TargecyEvents, ITargecy {\n  function initialize(\n    address _zkProofsValidator,\n    address _protocolVault,\n    uint256 _defaultImpressionPrice,\n    address targecyAdmin,\n    uint256 _defaultIssuer\n  ) external initializer {\n    __AccessControl_init();\n    __Pausable_init();\n\n    zkProofsValidator = _zkProofsValidator;\n    protocolVault = _protocolVault;\n    defaultImpressionPrice = _defaultImpressionPrice;\n    defaultClickPrice = 2 * _defaultImpressionPrice;\n    defaultConversionPrice = 3 * _defaultImpressionPrice;\n    defaultIssuer = _defaultIssuer;\n\n    _adId = 1;\n    _segmentId = 1;\n    _audienceId = 1;\n    totalconsumptions = 0;\n\n    _grantRole(DEFAULT_ADMIN_ROLE, targecyAdmin);\n    emit AdminSet(targecyAdmin);\n  }\n\n  function setAdmin(address targecyAdmin) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    _setupRole(DEFAULT_ADMIN_ROLE, targecyAdmin);\n\n    emit AdminSet(targecyAdmin);\n  }\n\n  function removeAdmin(address targecyAdmin) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    revokeRole(DEFAULT_ADMIN_ROLE, targecyAdmin);\n\n    emit AdminRemoved(targecyAdmin);\n  }\n\n  function setZKProofsValidator(address _zkProofsValidator) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    zkProofsValidator = _zkProofsValidator;\n  }\n\n  function setProtocolVault(address _protocolVault) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    protocolVault = _protocolVault;\n  }\n\n  function setDefaultImpressionPrice(uint256 _defaultImpressionPrice) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    defaultImpressionPrice = _defaultImpressionPrice;\n  }\n\n  function setDefaultClickPrice(uint256 _defaultClickPrice) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    defaultClickPrice = _defaultClickPrice;\n  }\n\n  function setDefaultConversionPrice(uint256 _defaultConversionPrice) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    defaultConversionPrice = _defaultConversionPrice;\n  }\n\n  function setDefaultIssuer(uint256 _defaultIssuer) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    defaultIssuer = _defaultIssuer;\n  }\n\n  function setSegment(DataTypes.Segment calldata _segment) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    requestQueries[_segmentId].query.value = _segment.query.value;\n    requestQueries[_segmentId].query.operator = _segment.query.operator;\n    requestQueries[_segmentId].query.circuitId = _segment.query.circuitId;\n    requestQueries[_segmentId].query.slotIndex = _segment.query.slotIndex;\n    requestQueries[_segmentId].query.schema = _segment.query.schema;\n\n    requestQueries[_segmentId].metadataURI = _segment.metadataURI;\n\n    // Use given issuer or default issuer\n    if (_segment.issuer == 0) {\n      requestQueries[_segmentId].issuer = defaultIssuer;\n    } else {\n      requestQueries[_segmentId].issuer = _segment.issuer;\n    }\n\n    emit SegmentCreated(_segmentId, address(zkProofsValidator), _segment.query, _segment.metadataURI, _segment.issuer);\n    _segmentId += 1;\n  }\n\n  function editSegment(uint256 id, DataTypes.Segment calldata _segment) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    requestQueries[id].query.value = _segment.query.value;\n    requestQueries[id].query.operator = _segment.query.operator;\n    requestQueries[id].query.circuitId = _segment.query.circuitId;\n    requestQueries[id].query.slotIndex = _segment.query.slotIndex;\n    requestQueries[id].query.schema = _segment.query.schema;\n\n    requestQueries[id].query.circuitId = _segment.query.circuitId;\n\n    emit SegmentEdited(id, address(zkProofsValidator), _segment.query, _segment.metadataURI);\n  }\n\n  function deleteSegment(uint256 id) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    delete requestQueries[id];\n\n    emit SegmentDeleted(id);\n  }\n\n  function createAd(DataTypes.NewAd calldata ad) external payable override {\n    if (msg.value < ad.budget) {\n      revert Errors.InsufficientFunds();\n    }\n\n    require(ad.attribution != DataTypes.Attribution.Conversion, \"Targecy: Conversion ads are not allowed yet.\");\n\n    ads[_adId] = DataTypes.Ad(\n      // Properties\n      _msgSender(),\n      ad.metadataURI,\n      ad.attribution,\n      // Conditions\n      ad.startingTimestamp,\n      ad.endingTimestamp,\n      ad.audienceIds,\n      ad.blacklistedPublishers,\n      ad.blacklistedWeekdays,\n      // Budget\n      ad.budget,\n      ad.budget,\n      ad.maxConsumptionsPerDay,\n      ad.maxPricePerConsumption,\n      // Stats\n      0\n    );\n\n    emit AdCreated(_adId, _msgSender(), ad);\n    _adId += 1;\n  }\n\n  function editAd(uint256 adId, DataTypes.NewAd calldata ad) external payable override whenNotPaused {\n    DataTypes.Ad storage adStorage = ads[adId];\n\n    if (adStorage.advertiser != _msgSender()) {\n      revert Errors.NotAdvertiser();\n    }\n\n    if (ad.budget > 0) {\n      if (ad.budget < (adStorage.totalBudget - adStorage.remainingBudget)) {\n        // Already spent\n        revert Errors.InvalidNewBudget();\n      } else if (ad.budget < adStorage.totalBudget) {\n        // Lowering budget\n        payable(_msgSender()).transfer(adStorage.totalBudget - ad.budget);\n      } else if (ad.budget > adStorage.totalBudget) {\n        // Increasing budget\n        if (msg.value != (adStorage.totalBudget - ad.budget)) {\n          revert Errors.InsufficientFunds();\n        }\n      }\n\n      uint256 alreadyConsumed = adStorage.totalBudget - adStorage.remainingBudget;\n      adStorage.remainingBudget = ad.budget - alreadyConsumed;\n      adStorage.totalBudget = ad.budget;\n    }\n\n    adStorage.metadataURI = ad.metadataURI;\n    adStorage.audienceIds = ad.audienceIds;\n\n    adStorage.blacklistedPublishers = ad.blacklistedPublishers;\n    adStorage.blacklistedWeekdays = ad.blacklistedWeekdays;\n    adStorage.startingTimestamp = ad.startingTimestamp;\n    adStorage.endingTimestamp = ad.endingTimestamp;\n    adStorage.maxConsumptionsPerDay = ad.maxConsumptionsPerDay;\n    adStorage.maxPricePerConsumption = ad.maxPricePerConsumption;\n    adStorage.attribution = ad.attribution;\n\n    emit AdEdited(adId, adStorage);\n  }\n\n  function deleteAd(uint256 adId) external override whenNotPaused {\n    DataTypes.Ad storage adStorage = ads[adId];\n\n    if (adStorage.advertiser != _msgSender()) {\n      revert Errors.NotAdvertiser();\n    }\n\n    payable(_msgSender()).transfer(adStorage.remainingBudget);\n\n    delete ads[adId];\n\n    emit AdDeleted(adId);\n  }\n\n  function createAudience(string calldata metadataURI, uint256[] calldata audienceIds) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    audiences[_audienceId] = DataTypes.Audience(metadataURI, audienceIds, 0);\n\n    emit AudienceCreated(_audienceId, metadataURI, audienceIds);\n    _audienceId += 1;\n  }\n\n  function editAudience(uint256 audienceId, string calldata metadataURI, uint256[] calldata segmentIds) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    DataTypes.Audience storage audienceStorage = audiences[audienceId];\n\n    if (segmentIds.length == 0) {\n      revert Errors.InvalidZKProofsLength();\n    }\n\n    audienceStorage.metadataURI = metadataURI;\n    audienceStorage.segmentIds = segmentIds;\n\n    emit AudienceEdited(audienceId, metadataURI, segmentIds);\n  }\n\n  function deleteAudience(uint256 audienceId) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    delete audiences[audienceId];\n\n    emit AudienceDeleted(audienceId);\n  }\n\n  function verifyZKProof(\n    uint256 requestId,\n    uint256[] memory inputs,\n    uint256[2] memory a,\n    uint256[2][2] memory b,\n    uint256[2] memory c\n  ) public view returns (bool) {\n    // sig circuit has 8th public signal as issuer id\n    require(inputs.length > 7 && inputs[7] == requestQueries[requestId].issuer, \"ZKProofs has an invalid issuer.\");\n\n    return ICircuitValidator(zkProofsValidator).verify(inputs, a, b, c, requestQueries[requestId].query);\n  }\n\n  function _bulkVerifyZKProofs(\n    uint256[] memory audienceIds,\n    uint256[][] memory inputs,\n    uint256[2][] memory a,\n    uint256[2][2][] memory b,\n    uint256[2][] memory c\n  ) internal view returns (bool) {\n    if (audienceIds.length != inputs.length || audienceIds.length != a.length || audienceIds.length != b.length || audienceIds.length != c.length) {\n      return false;\n    }\n\n    for (uint256 i = 0; i < audienceIds.length; i++) {\n      if (!verifyZKProof(audienceIds[i], inputs[i], a[i], b[i], c[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function distributeRewards(uint256 adId, address user, DataTypes.Ad storage ad, DataTypes.PublisherRewards calldata publisher) internal {\n    uint256 consumptionPrice;\n    if (ad.attribution == DataTypes.Attribution.Impression) {\n      consumptionPrice = defaultImpressionPrice;\n    } else if (ad.attribution == DataTypes.Attribution.Click) {\n      consumptionPrice = defaultClickPrice;\n    } else if (ad.attribution == DataTypes.Attribution.Conversion) {\n      consumptionPrice = defaultConversionPrice;\n    } else {\n      revert Errors.InvalidAttribution();\n    }\n\n    if (consumptionPrice > ad.maxPricePerConsumption) {\n      revert Errors.ConsumptionPriceTooHigh();\n    }\n\n    if (consumptionPrice > ad.remainingBudget) {\n      revert Errors.InsufficientFunds();\n    }\n\n    ad.remainingBudget = ad.remainingBudget - consumptionPrice;\n    ad.consumptions = ad.consumptions + 1;\n\n    // Protocol Fee\n    uint256 protocolFee = calculatePercentage(consumptionPrice, Constants.PROTOCOL_FEE_PERCENTAGE);\n    payable(protocolVault).transfer(protocolFee);\n\n    // Publisher Fee\n    uint256 publisherFee;\n    if (publisher.percentage > 0) {\n      if (publisher.percentage > (Constants.PERCENTAGES_PRECISION - Constants.PROTOCOL_FEE_PERCENTAGE)) {\n        revert Errors.PublisherPercentageTooBig();\n      }\n      publisherFee = calculatePercentage(consumptionPrice, publisher.percentage);\n      payable(publisher.publisherVault).transfer(publisherFee);\n    }\n\n    // User Rewards\n    uint256 userRewards = consumptionPrice - protocolFee - publisherFee;\n    payable(user).transfer(userRewards);\n\n    emit AdConsumed(adId, ad, publisher.publisherVault, consumptionPrice);\n  }\n\n  /// @notice Sets the pause state to true in case of emergency, triggered by an authorized account.\n  function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _pause();\n  }\n\n  /// @notice Sets the pause state to false when threat is gone, triggered by an authorized account.\n  function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _unpause();\n  }\n\n  function _consumeAd(address viewer, uint64 adId, DataTypes.PublisherRewards calldata publisher, DataTypes.ZKProofs calldata zkProofs) internal {\n    DataTypes.Ad storage ad = ads[adId];\n\n    if (ad.remainingBudget == 0) {\n      revert Errors.AdConsumed();\n    }\n\n    if (ad.startingTimestamp > block.timestamp || ad.endingTimestamp < block.timestamp) {\n      revert Errors.AdNotAvailable();\n    }\n\n    for (uint256 i = 0; i < ad.blacklistedPublishers.length; i++) {\n      if (ad.blacklistedPublishers[i] == publisher.publisherVault) {\n        revert Errors.PublisherBlacklistedInAd();\n      }\n    }\n\n    if (publisher.percentage > 0 && publisher.publisherVault != address(0) && whitelistedPublishers[publisher.publisherVault] == false) {\n      // The call should come from an whitelisted publisher\n      revert Errors.PublisherNotWhitelisted();\n    }\n\n    uint256 weekDay = Helpers.getWeekDayFromTimestamp(block.timestamp);\n    for (uint256 i = 0; i < ad.blacklistedWeekdays.length; i++) {\n      if (ad.blacklistedWeekdays[i] == weekDay) {\n        revert Errors.WeekdayBlacklistedInAd();\n      }\n    }\n\n    uint256 dayFromEpoch = Helpers.getDayFromEpoch(block.timestamp);\n    if (ad.maxConsumptionsPerDay > 0 && (consumptionsPerDay[adId][dayFromEpoch] + 1) > ad.maxConsumptionsPerDay) {\n      revert Errors.NoRemainingComsumptionsForTheDay();\n    }\n    consumptionsPerDay[adId][dayFromEpoch] = consumptionsPerDay[adId][dayFromEpoch] + 1;\n\n    // Verify ZKProofs - At least one Audience must be valid\n    bool audienceValidated;\n    for (uint256 i = 0; i < ad.audienceIds.length; i++) {\n      DataTypes.Audience memory audience = audiences[ad.audienceIds[i]];\n\n      if (audience.segmentIds.length == 0) {\n        // Audience does not exists.\n        continue;\n      }\n\n      if (_bulkVerifyZKProofs(audience.segmentIds, zkProofs.inputs, zkProofs.a, zkProofs.b, zkProofs.c)) {\n        audienceValidated = true;\n        audience.consumptions = audience.consumptions + 1;\n        break;\n      }\n    }\n    if (!audienceValidated) {\n      revert Errors.InvalidZKProofsInput();\n    }\n\n    // TODO: Missing security validations:\n    // Avoid spoofing (limit ads per wallet per block range?)\n    // Avoid reutilization of proofs (wallet signature?)\n    // Accept user's signature (for gasless txs)\n    // TODO: Validate publisher's signature to avoid calls from code.\n\n    totalconsumptions += 1;\n\n    // Proofs verified, distribute rewards\n    distributeRewards(adId, viewer, ad, publisher);\n  }\n\n  /**\n   * This function is used to consume an ad via a tx initialized by the relayer.\n   *\n   * @param adId        The id of the ad to be consumed.\n   * @param publisher   The publisher that has shown the ad.\n   * @param zkProofs    The zk proofs.\n   */\n  function consumeAdViaRelayer(\n    address viewer,\n    uint64 adId,\n    DataTypes.PublisherRewards calldata publisher,\n    DataTypes.ZKProofs calldata zkProofs\n  ) external override whenNotPaused {\n    require(msg.sender == relayerAddress, \"Targecy: Only relayer can call this function\");\n\n    _consumeAd(viewer, adId, publisher, zkProofs);\n  }\n\n  /**\n   * This function is used to consume an ad via a tx initialized by the user.\n   *\n   * @param adId        The id of the ad to be consumed.\n   * @param publisher   The publisher that has shown the ad.\n   * @param zkProofs    The zk proofs.\n   * @param targecySig  Targecy's signature validating that the ad has been seen.\n   */\n  function consumeAd(\n    uint64 adId,\n    DataTypes.PublisherRewards calldata publisher,\n    DataTypes.ZKProofs calldata zkProofs,\n    DataTypes.EIP712Signature calldata targecySig\n  ) external override whenNotPaused {\n    // Validates Targecy's signature\n    require(!usedSigNonces[targecySig.nonce], \"Targecy: Signature nonce already used\");\n    unchecked {\n      Helpers._validateRecoveredAddress(\n        Helpers._calculateDigest(keccak256(abi.encode(Constants.CONSUME_AD_VERIFICATION_SIG_TYPEHASH, adId, targecySig.nonce, targecySig.deadline))),\n        relayerAddress,\n        targecySig\n      );\n    }\n    usedSigNonces[targecySig.nonce] = true;\n\n    _consumeAd(msg.sender, adId, publisher, zkProofs);\n  }\n\n  function whitelistPublisher(address publisher) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    whitelistedPublishers[publisher] = true;\n\n    emit PublisherWhitelisted(publisher);\n  }\n\n  function removePublisherFromWhitelist(address publisher) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n    whitelistedPublishers[publisher] = false;\n\n    emit PublisherRemovedFromWhitelist(publisher);\n  }\n\n  function calculatePercentage(uint256 total, uint256 percentage) public pure returns (uint256) {\n    // if (total < Constants.PERCENTAGES_PRECISION) revert Errors.PercentageTotalTooSmall();\n    if (percentage > Constants.PERCENTAGES_PRECISION) revert Errors.PercentageTooBig();\n\n    return (total * percentage) / Constants.PERCENTAGES_PRECISION;\n  }\n\n  function getAudienceSegments(uint256 audienceId) external view override returns (uint256[] memory) {\n    return audiences[audienceId].segmentIds;\n  }\n\n  function getAdAudiences(uint256 adId) external view override returns (uint256[] memory) {\n    return ads[adId].audienceIds;\n  }\n}\n"
    },
    "contracts/interfaces/ICircuitValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Interface\n// ========================================================\ninterface ICircuitValidator {\n  // Variables\n  struct CircuitQuery {\n    uint256 schema;\n    uint256 slotIndex;\n    uint256 operator;\n    uint256[] value;\n    string circuitId;\n  }\n\n  /**\n   * @dev verify\n   */\n  function verify(\n    uint256[] memory inputs,\n    uint256[2] memory a,\n    uint256[2][2] memory b,\n    uint256[2] memory c,\n    CircuitQuery memory query\n  ) external view returns (bool r);\n\n  /**\n   * @dev getCircuitId\n   */\n  function getCircuitId() external pure returns (string memory id);\n\n  /**\n   * @dev getChallengeInputIndex\n   */\n  function getChallengeInputIndex() external pure returns (uint256 index);\n\n  /**\n   * @dev getUserIdInputIndex\n   */\n  function getUserIdInputIndex() external pure returns (uint256 index);\n}\n"
    },
    "contracts/interfaces/ITargecy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.10;\n\nimport { DataTypes } from \"../libraries/DataTypes.sol\";\nimport { ICircuitValidator } from \"../interfaces/ICircuitValidator.sol\";\n\ninterface ITargecy {\n  function setZKProofsValidator(address _zkProofsValidator) external;\n\n  function setProtocolVault(address _protocolVault) external;\n\n  function setSegment(DataTypes.Segment memory _segment) external;\n\n  function editSegment(uint256 audienceId, DataTypes.Segment memory _segment) external;\n\n  function deleteSegment(uint256 audienceId) external;\n\n  function setDefaultImpressionPrice(uint256 _defaultImpressionPrice) external;\n\n  function setDefaultClickPrice(uint256 _defaultClickPrice) external;\n\n  function setDefaultConversionPrice(uint256 _defaultConversionPrice) external;\n\n  function setDefaultIssuer(uint256 _defaultIssuer) external;\n\n  function createAd(DataTypes.NewAd calldata ad) external payable;\n\n  function editAd(uint256 adId, DataTypes.NewAd calldata ad) external payable;\n\n  function deleteAd(uint256 adId) external;\n\n  function consumeAd(\n    uint64 adId,\n    DataTypes.PublisherRewards calldata publisher,\n    DataTypes.ZKProofs calldata zkProofs,\n    DataTypes.EIP712Signature calldata targecySig\n  ) external;\n\n  function consumeAdViaRelayer(address viewer, uint64 adId, DataTypes.PublisherRewards calldata publisher, DataTypes.ZKProofs calldata zkProofs) external;\n\n  function createAudience(string calldata metadataURI, uint256[] calldata audienceIds) external;\n\n  function editAudience(uint256 audienceId, string calldata metadataURI, uint256[] calldata audienceIds) external;\n\n  function deleteAudience(uint256 audienceId) external;\n\n  function getAudienceSegments(uint256 audienceId) external view returns (uint256[] memory);\n\n  function getAdAudiences(uint256 audienceId) external view returns (uint256[] memory);\n\n  function whitelistPublisher(address publisher) external;\n\n  function removePublisherFromWhitelist(address publisher) external;\n\n  function setAdmin(address targecyAdmin) external;\n\n  function removeAdmin(address targecyAdmin) external;\n}\n"
    },
    "contracts/libraries/Constants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.10;\n\nlibrary Constants {\n  bytes32 internal constant EIP712_REVISION_HASH = keccak256(\"1\");\n  bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n  string public constant NAME = \"Targecy\";\n\n  /**\n   * @dev The EIP-712 typehash for the \"ConsumeAdTargecyVerification\" struct used by the contract.\n   * @dev The struct contains the following fields:\n   * @dev - adId: The ID of the ad being consumed.\n   * @dev - nonce: The nonce of the targecy's signature, used to prevent replay attacks.\n   */\n  bytes32 internal constant CONSUME_AD_VERIFICATION_SIG_TYPEHASH = keccak256(\"ConsumeAdTargecyVerification(uint256 adId,uint256 nonce,uint256 deadline)\");\n\n  uint256 constant PERCENTAGES_PRECISION = 10000;\n  uint16 constant PROTOCOL_FEE_PERCENTAGE = 1000; // 10% out of 10000 precision\n}\n"
    },
    "contracts/libraries/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.10;\n\nimport { ICircuitValidator } from \"../interfaces/ICircuitValidator.sol\";\n\nlibrary DataTypes {\n  /**\n   * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\n   *\n   * @param v The signature's recovery parameter.\n   * @param r The signature's r parameter.\n   * @param s The signature's s parameter\n   * @param deadline The signature's deadline\n   * @param nonce The signature's nonce\n   */\n  struct EIP712Signature {\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    uint256 deadline;\n    uint256 nonce;\n  }\n\n  enum Attribution {\n    Impression,\n    Click,\n    Conversion\n  }\n  struct NewAd {\n    // Properties\n    string metadataURI;\n    Attribution attribution; // 0: impression, 1: click, 2: conversion\n    // Conditions\n    uint256 startingTimestamp;\n    uint256 endingTimestamp;\n    uint256[] audienceIds;\n    address[] blacklistedPublishers;\n    uint8[] blacklistedWeekdays;\n    // Budget\n    uint256 budget;\n    uint256 maxPricePerConsumption;\n    uint256 maxConsumptionsPerDay;\n  }\n\n  struct Ad {\n    // Properties\n    address advertiser;\n    string metadataURI;\n    Attribution attribution; // 0: impression, 1: click, 2: conversion\n    // Conditions\n    uint256 startingTimestamp;\n    uint256 endingTimestamp;\n    uint256[] audienceIds;\n    address[] blacklistedPublishers;\n    uint8[] blacklistedWeekdays;\n    // Budget\n    uint256 totalBudget;\n    uint256 remainingBudget;\n    uint256 maxConsumptionsPerDay;\n    uint256 maxPricePerConsumption;\n    // Stats\n    uint256 consumptions;\n  }\n\n  struct Segment {\n    ICircuitValidator.CircuitQuery query;\n    string metadataURI;\n    uint256 issuer;\n  }\n\n  struct Audience {\n    string metadataURI;\n    uint256[] segmentIds;\n    uint256 consumptions;\n  }\n\n  struct ZKProofs {\n    uint256[][] inputs;\n    uint256[2][] a;\n    uint256[2][2][] b;\n    uint256[2][] c;\n  }\n\n  struct PublisherRewards {\n    uint256 percentage; // presicion: 10000\n    address publisherVault;\n  }\n}\n"
    },
    "contracts/libraries/Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.10;\n\nlibrary Errors {\n  error PublisherBlacklistedInAd();\n  error WeekdayBlacklistedInAd();\n  error NoRemainingComsumptionsForTheDay();\n  error ConsumptionPriceTooHigh();\n  error InvalidNewBudget();\n  error InvalidAttribution();\n  error InvalidZKProofsLength();\n  error AdConsumed();\n  error AdNotAvailable();\n  error InsufficientFunds();\n  error NotAdvertiser();\n  error PublisherNotWhitelisted();\n  error PublisherPercentageTooBig();\n  error PercentageTotalTooSmall();\n  error PercentageTooBig();\n  error SignatureInvalid();\n  error SignatureExpired();\n  error InvalidProofs();\n  error InvalidZKProof();\n  error InvalidZKProofsInput();\n  error UseConsumeAdMethodInstead();\n}\n"
    },
    "contracts/libraries/Helpers.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.10;\n\nimport { DataTypes } from \"./DataTypes.sol\";\nimport { Errors } from \"./Errors.sol\";\nimport { Constants } from \"./Constants.sol\";\n\nlibrary Helpers {\n  function getDayFromEpoch(uint256 timestamp) internal pure returns (uint256) {\n    return timestamp / 86400;\n  }\n\n  function getWeekDayFromTimestamp(uint256 timestamp) internal pure returns (uint256) {\n    return (timestamp / 86400 + 4) % 7;\n  }\n\n  /**\n   * @dev Wrapper for ecrecover to reduce code size, used in meta-tx specific functions.\n   */\n  function _validateRecoveredAddress(bytes32 digest, address expectedAddress, DataTypes.EIP712Signature calldata sig) internal view {\n    if (sig.deadline < block.timestamp) revert Errors.SignatureExpired();\n    address recoveredAddress = ecrecover(digest, sig.v, sig.r, sig.s);\n    if (recoveredAddress == address(0) || recoveredAddress != expectedAddress) revert Errors.SignatureInvalid();\n  }\n\n  /**\n   * @dev Calculates EIP712 DOMAIN_SEPARATOR based on the current contract and chain ID.\n   */\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n\n    return keccak256(abi.encode(Constants.EIP712_DOMAIN_TYPEHASH, keccak256(bytes(Constants.NAME)), Constants.EIP712_REVISION_HASH, chainId, address(this)));\n  }\n\n  /**\n   * @dev Calculates EIP712 digest based on the current DOMAIN_SEPARATOR.\n   *\n   * @param hashedMessage The message hash from which the digest should be calculated.\n   *\n   * @return bytes32 A 32-byte output representing the EIP712 digest.\n   */\n  function _calculateDigest(bytes32 hashedMessage) internal view returns (bytes32) {\n    bytes32 digest;\n    unchecked {\n      digest = keccak256(abi.encodePacked(\"\\x19\\x01\", _calculateDomainSeparator(), hashedMessage));\n    }\n    return digest;\n  }\n}\n"
    },
    "contracts/libraries/TargecyEvents.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.10;\n\nimport { ICircuitValidator } from \"../interfaces/ICircuitValidator.sol\";\nimport { DataTypes } from \"../libraries/DataTypes.sol\";\n\ninterface TargecyEvents {\n  event AdCreated(uint256 indexed adId, address indexed advertiser, DataTypes.NewAd ad);\n\n  event AdEdited(uint256 indexed adId, DataTypes.Ad ad);\n\n  event AdDeleted(uint256 indexed adId);\n\n  event AudienceCreated(uint256 indexed audienceId, string metadataURI, uint256[] segmentIds);\n\n  event AudienceEdited(uint256 indexed audienceId, string metadataURI, uint256[] segmentIds);\n\n  event AudienceDeleted(uint256 indexed audienceId);\n\n  event SegmentCreated(uint256 indexed segmentId, address indexed validator, ICircuitValidator.CircuitQuery query, string metadataURI, uint256 issuer);\n\n  event SegmentEdited(uint256 indexed segmentId, address indexed validator, ICircuitValidator.CircuitQuery query, string metadataURI);\n\n  event SegmentDeleted(uint256 indexed segmentId);\n\n  event AdConsumed(uint256 indexed adId, DataTypes.Ad ad, address publisher, uint256 consumptionPrice);\n\n  event PublisherWhitelisted(address indexed publisher);\n\n  event PublisherRemovedFromWhitelist(address indexed publisher);\n\n  event AdminSet(address indexed admin);\n\n  event AdminRemoved(address indexed admin);\n}\n"
    },
    "contracts/mock/MockValidator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.10;\n\nimport { ICircuitValidator } from \"../interfaces/ICircuitValidator.sol\";\n\ncontract MockValidator is ICircuitValidator {\n  function verify(\n    uint256[] memory inputs,\n    uint256[2] memory a,\n    uint256[2][2] memory b,\n    uint256[2] memory c,\n    CircuitQuery memory query\n  ) external pure returns (bool r) {\n    require(inputs.length > 0, \"Invalid inputs length\");\n    require(a.length > 0, \"Invalid a length\");\n    require(b.length > 0, \"Invalid b length\");\n    require(c.length > 0, \"Invalid c length\");\n    require(query.operator > 0, \"Invalid operator\");\n\n    return true;\n  }\n\n  function getCircuitId() external pure returns (string memory id) {\n    return \"mock\";\n  }\n\n  function getChallengeInputIndex() external pure returns (uint256 index) {\n    return 0;\n  }\n\n  function getUserIdInputIndex() external pure returns (uint256 index) {\n    return 1;\n  }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 250
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}