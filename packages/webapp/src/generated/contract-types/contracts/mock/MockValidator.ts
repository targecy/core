/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ICircuitValidator {
  export type CircuitQueryStruct = {
    schema: BigNumberish;
    slotIndex: BigNumberish;
    operator: BigNumberish;
    value: BigNumberish[];
    circuitId: string;
  };

  export type CircuitQueryStructOutput = [
    schema: bigint,
    slotIndex: bigint,
    operator: bigint,
    value: bigint[],
    circuitId: string
  ] & {
    schema: bigint;
    slotIndex: bigint;
    operator: bigint;
    value: bigint[];
    circuitId: string;
  };
}

export interface MockValidatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getChallengeInputIndex"
      | "getCircuitId"
      | "getUserIdInputIndex"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getChallengeInputIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCircuitId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserIdInputIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      BigNumberish[],
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      ICircuitValidator.CircuitQueryStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getChallengeInputIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCircuitId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserIdInputIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export interface MockValidator extends BaseContract {
  contractName: "MockValidator";

  connect(runner?: ContractRunner | null): MockValidator;
  waitForDeployment(): Promise<this>;

  interface: MockValidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getChallengeInputIndex: TypedContractMethod<[], [bigint], "view">;

  getCircuitId: TypedContractMethod<[], [string], "view">;

  getUserIdInputIndex: TypedContractMethod<[], [bigint], "view">;

  verify: TypedContractMethod<
    [
      inputs: BigNumberish[],
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      query: ICircuitValidator.CircuitQueryStruct
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getChallengeInputIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCircuitId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUserIdInputIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [
      inputs: BigNumberish[],
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      query: ICircuitValidator.CircuitQueryStruct
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
