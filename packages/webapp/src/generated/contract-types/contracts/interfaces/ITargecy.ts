/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypes {
  export type ZKProofsStruct = {
    inputs: BigNumberish[][];
    a: [BigNumberish, BigNumberish][];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]][];
    c: [BigNumberish, BigNumberish][];
  };

  export type ZKProofsStructOutput = [
    inputs: bigint[][],
    a: [bigint, bigint][],
    b: [[bigint, bigint], [bigint, bigint]][],
    c: [bigint, bigint][]
  ] & {
    inputs: bigint[][];
    a: [bigint, bigint][];
    b: [[bigint, bigint], [bigint, bigint]][];
    c: [bigint, bigint][];
  };

  export type NewAdStruct = {
    metadataURI: string;
    attribution: BigNumberish;
    active: boolean;
    abi: string;
    target: AddressLike;
    startingTimestamp: BigNumberish;
    endingTimestamp: BigNumberish;
    audienceIds: BigNumberish[];
    blacklistedPublishers: AddressLike[];
    blacklistedWeekdays: BigNumberish[];
    maxBudget: BigNumberish;
    maxPricePerConsumption: BigNumberish;
    maxConsumptionsPerDay: BigNumberish;
  };

  export type NewAdStructOutput = [
    metadataURI: string,
    attribution: bigint,
    active: boolean,
    abi: string,
    target: string,
    startingTimestamp: bigint,
    endingTimestamp: bigint,
    audienceIds: bigint[],
    blacklistedPublishers: string[],
    blacklistedWeekdays: bigint[],
    maxBudget: bigint,
    maxPricePerConsumption: bigint,
    maxConsumptionsPerDay: bigint
  ] & {
    metadataURI: string;
    attribution: bigint;
    active: boolean;
    abi: string;
    target: string;
    startingTimestamp: bigint;
    endingTimestamp: bigint;
    audienceIds: bigint[];
    blacklistedPublishers: string[];
    blacklistedWeekdays: bigint[];
    maxBudget: bigint;
    maxPricePerConsumption: bigint;
    maxConsumptionsPerDay: bigint;
  };

  export type PublisherSettingsStruct = {
    userRewardsPercentage: BigNumberish;
    vault: AddressLike;
    active: boolean;
    cpi: BigNumberish;
    cpc: BigNumberish;
    cpa: BigNumberish;
  };

  export type PublisherSettingsStructOutput = [
    userRewardsPercentage: bigint,
    vault: string,
    active: boolean,
    cpi: bigint,
    cpc: bigint,
    cpa: bigint
  ] & {
    userRewardsPercentage: bigint;
    vault: string;
    active: boolean;
    cpi: bigint;
    cpc: bigint;
    cpa: bigint;
  };

  export type SegmentStruct = {
    query: ICircuitValidator.CircuitQueryStruct;
    metadataURI: string;
    issuer: BigNumberish;
  };

  export type SegmentStructOutput = [
    query: ICircuitValidator.CircuitQueryStructOutput,
    metadataURI: string,
    issuer: bigint
  ] & {
    query: ICircuitValidator.CircuitQueryStructOutput;
    metadataURI: string;
    issuer: bigint;
  };
}

export declare namespace ICircuitValidator {
  export type CircuitQueryStruct = {
    schema: BigNumberish;
    slotIndex: BigNumberish;
    operator: BigNumberish;
    value: BigNumberish[];
    circuitId: string;
  };

  export type CircuitQueryStructOutput = [
    schema: bigint,
    slotIndex: bigint,
    operator: bigint,
    value: bigint[],
    circuitId: string
  ] & {
    schema: bigint;
    slotIndex: bigint;
    operator: bigint;
    value: bigint[];
    circuitId: string;
  };
}

export interface ITargecyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changePublisherAddress"
      | "consumeAd"
      | "consumeAdViaRelayer"
      | "deleteAd"
      | "deleteAudience"
      | "deleteSegment"
      | "fundAdvertiserBudget"
      | "getAdAudiences"
      | "getAudienceSegments"
      | "pauseAd"
      | "pausePublisher"
      | "removeAdmin"
      | "removePublisher"
      | "setAd"
      | "setAdmin"
      | "setAudience"
      | "setDefaultClickPrice"
      | "setDefaultConversionPrice"
      | "setDefaultImpressionPrice"
      | "setDefaultIssuer"
      | "setPublisher"
      | "setRelayer"
      | "setSegment"
      | "setValidator"
      | "setVault"
      | "unpauseAd"
      | "unpausePublisher"
      | "withdrawAdvertiserBudget"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changePublisherAddress",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeAd",
    values: [BigNumberish, AddressLike, DataTypes.ZKProofsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeAdViaRelayer",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      DataTypes.ZKProofsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAudience",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSegment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAdvertiserBudget",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdAudiences",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAudienceSegments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseAd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pausePublisher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removePublisher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAd",
    values: [BigNumberish, DataTypes.NewAdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAudience",
    values: [BigNumberish, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultClickPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultConversionPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultImpressionPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultIssuer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublisher",
    values: [DataTypes.PublisherSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSegment",
    values: [BigNumberish, DataTypes.SegmentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseAd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpausePublisher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAdvertiserBudget",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changePublisherAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consumeAd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consumeAdViaRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteAd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteAudience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSegment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundAdvertiserBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdAudiences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAudienceSegments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseAd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausePublisher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePublisher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAudience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultClickPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultConversionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultImpressionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublisher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRelayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSegment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpauseAd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpausePublisher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAdvertiserBudget",
    data: BytesLike
  ): Result;
}

export interface ITargecy extends BaseContract {
  contractName: "ITargecy";

  connect(runner?: ContractRunner | null): ITargecy;
  waitForDeployment(): Promise<this>;

  interface: ITargecyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changePublisherAddress: TypedContractMethod<
    [oldAddress: AddressLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  consumeAd: TypedContractMethod<
    [
      adId: BigNumberish,
      publisher: AddressLike,
      zkProofs: DataTypes.ZKProofsStruct,
      actionParams: BytesLike
    ],
    [void],
    "payable"
  >;

  consumeAdViaRelayer: TypedContractMethod<
    [
      viewer: AddressLike,
      adId: BigNumberish,
      publisher: AddressLike,
      zkProofs: DataTypes.ZKProofsStruct,
      actionParams: BytesLike
    ],
    [void],
    "payable"
  >;

  deleteAd: TypedContractMethod<[adId: BigNumberish], [void], "nonpayable">;

  deleteAudience: TypedContractMethod<
    [audienceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteSegment: TypedContractMethod<
    [audienceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundAdvertiserBudget: TypedContractMethod<
    [advertiser: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAdAudiences: TypedContractMethod<
    [audienceId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getAudienceSegments: TypedContractMethod<
    [audienceId: BigNumberish],
    [bigint[]],
    "view"
  >;

  pauseAd: TypedContractMethod<[adId: BigNumberish], [void], "nonpayable">;

  pausePublisher: TypedContractMethod<
    [publisher: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<
    [targecyAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  removePublisher: TypedContractMethod<
    [publisher: AddressLike],
    [void],
    "nonpayable"
  >;

  setAd: TypedContractMethod<
    [adIdReceived: BigNumberish, ad: DataTypes.NewAdStruct],
    [void],
    "payable"
  >;

  setAdmin: TypedContractMethod<
    [targecyAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  setAudience: TypedContractMethod<
    [
      audienceIdReceived: BigNumberish,
      metadataURI: string,
      audienceIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setDefaultClickPrice: TypedContractMethod<
    [_defaultClickPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultConversionPrice: TypedContractMethod<
    [_defaultConversionPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultImpressionPrice: TypedContractMethod<
    [_defaultImpressionPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultIssuer: TypedContractMethod<
    [_defaultIssuer: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPublisher: TypedContractMethod<
    [publisher: DataTypes.PublisherSettingsStruct],
    [void],
    "nonpayable"
  >;

  setRelayer: TypedContractMethod<
    [_relayer: AddressLike],
    [void],
    "nonpayable"
  >;

  setSegment: TypedContractMethod<
    [audienceIdReceived: BigNumberish, _segment: DataTypes.SegmentStruct],
    [void],
    "nonpayable"
  >;

  setValidator: TypedContractMethod<
    [_validator: AddressLike],
    [void],
    "nonpayable"
  >;

  setVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  unpauseAd: TypedContractMethod<[adId: BigNumberish], [void], "nonpayable">;

  unpausePublisher: TypedContractMethod<
    [publisher: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawAdvertiserBudget: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changePublisherAddress"
  ): TypedContractMethod<
    [oldAddress: AddressLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "consumeAd"
  ): TypedContractMethod<
    [
      adId: BigNumberish,
      publisher: AddressLike,
      zkProofs: DataTypes.ZKProofsStruct,
      actionParams: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "consumeAdViaRelayer"
  ): TypedContractMethod<
    [
      viewer: AddressLike,
      adId: BigNumberish,
      publisher: AddressLike,
      zkProofs: DataTypes.ZKProofsStruct,
      actionParams: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deleteAd"
  ): TypedContractMethod<[adId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteAudience"
  ): TypedContractMethod<[audienceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteSegment"
  ): TypedContractMethod<[audienceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundAdvertiserBudget"
  ): TypedContractMethod<
    [advertiser: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAdAudiences"
  ): TypedContractMethod<[audienceId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAudienceSegments"
  ): TypedContractMethod<[audienceId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "pauseAd"
  ): TypedContractMethod<[adId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pausePublisher"
  ): TypedContractMethod<[publisher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[targecyAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removePublisher"
  ): TypedContractMethod<[publisher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAd"
  ): TypedContractMethod<
    [adIdReceived: BigNumberish, ad: DataTypes.NewAdStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[targecyAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAudience"
  ): TypedContractMethod<
    [
      audienceIdReceived: BigNumberish,
      metadataURI: string,
      audienceIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultClickPrice"
  ): TypedContractMethod<
    [_defaultClickPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultConversionPrice"
  ): TypedContractMethod<
    [_defaultConversionPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultImpressionPrice"
  ): TypedContractMethod<
    [_defaultImpressionPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultIssuer"
  ): TypedContractMethod<[_defaultIssuer: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublisher"
  ): TypedContractMethod<
    [publisher: DataTypes.PublisherSettingsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRelayer"
  ): TypedContractMethod<[_relayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSegment"
  ): TypedContractMethod<
    [audienceIdReceived: BigNumberish, _segment: DataTypes.SegmentStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setValidator"
  ): TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpauseAd"
  ): TypedContractMethod<[adId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpausePublisher"
  ): TypedContractMethod<[publisher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAdvertiserBudget"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  filters: {};
}
