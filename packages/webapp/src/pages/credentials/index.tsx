import { InfoCircleOutlined } from '@ant-design/icons';
import { useTargecyContext, cloneCredential, useCredentials, useCredentialsStatistics } from '@targecy/sdk';
import { useCredentialsByType } from '@targecy/sdk/src/hooks/useCredentialsByType';
import Link from 'next/link';
import { useState } from 'react';
import { useSignMessage } from 'wagmi';

import { CredentialsLoader } from '~/components/loaders/CredentialsLoader';
import { NoWalletConnected } from '~/components/shared/Wallet/components/NoWalletConnected';
import { useWallet } from '~/hooks';
import { triggerSweetAlert } from '~/utils/alerts';
import { backendTrpcClient } from '~/utils/trpc';

const Credentials = () => {
  const { context } = useTargecyContext();
  const { setCredentials } = useCredentials(context);
  const credentialsByType = useCredentialsByType(context);
  const credentialsStatistics = useCredentialsStatistics(context);
  const { isConnected, address } = useWallet();
  const { signMessageAsync } = useSignMessage();
  const [fetchingCredentials, setFetchingCredentials] = useState(false);
  const [credentialsFetched, setCredentialsFetched] = useState(false);

  const getPublicCredentials = () =>
    signMessageAsync({ message: 'public.credentials' }).then((signature) =>
      backendTrpcClient.credentials.getPublicCredentials
        .query({
          signature,
          wallet: address as `0x${string}`,
          did: context.userIdentity?.did.id || '',
        })
        .then((res) => {
          setCredentials(res.map(cloneCredential));
          setFetchingCredentials(false);
        })
    );

  if (!context.userIdentity) return <CredentialsLoader />;

  return (
    <>
      <div className="mb-8 w-full gap-8 sm:grid-cols-2 md:grid-cols-2 lg:grid lg:grid-cols-2">
        <div className="panel h-full w-full sm:col-span-2 md:col-span-2 lg:col-span-1">
          <div className="mb-2  dark:text-white-light">
            <h5 className="text-lg font-semibold text-primary">Available Credentials</h5>
            <span>Fetch credentials to improve your experience and earn more rewards.</span>
          </div>
          <div className="mb-3 mt-6 grid grid-cols-2 gap-4 text-sm font-bold text-[#515365]">
            {isConnected ? (
              !credentialsFetched && (
                <button
                  disabled={fetchingCredentials}
                  className="btn btn-outline shadow-none"
                  onClick={() => {
                    setFetchingCredentials(true);
                    setCredentialsFetched(true);
                    getPublicCredentials()
                      .then(() => triggerSweetAlert('Public-data credentials retrieved successfully.', 'success'))
                      .catch(() => triggerSweetAlert('Error retrieving public-data credentials.', 'error'));
                  }}>
                  {fetchingCredentials ? 'Fetching Credentials...' : 'Fetch public-data credentials'}
                </button>
              )
            ) : (
              <NoWalletConnected caption="Please connect Wallet"></NoWalletConnected>
            )}
            <button className="btn btn-disabled btn-outline shadow-none"> Interests (coming soon)</button>
            <button className="btn btn-disabled btn-outline shadow-none"> Profile (coming soon)</button>
            <button className="btn btn-disabled btn-outline shadow-none"> Shopping Preferences (coming soon)</button>
          </div>
        </div>
        <div className="panel h-full w-full sm:col-span-2 md:col-span-2 lg:col-span-1">
          <div className="mb-2  dark:text-white-light">
            <h5 className="text-lg font-semibold text-primary">Identity</h5>
            <span>Your autogenerated identity that owns all the other credentials.</span>
          </div>
          <div className="w-full text-sm font-bold text-[#515365] sm:grid-cols-2">
            <div>
              <div>
                <div>Type</div>
                <p className="text-wrap break-words text-dark dark:text-white-light md:text-sm lg:text-lg">
                  {context.userIdentity?.credential.type}
                </p>
              </div>
              <div>
                <div>DID</div>
                <p className="text-wrap break-words text-dark dark:text-white-light md:text-sm lg:text-lg">
                  {context.userIdentity?.did.id}
                </p>
              </div>
              <span className="mt-4 flex">
                <Link
                  href="https://docs.targecy.xyz/enthusiasts/privacy-first-user-experience"
                  target="_blank"
                  className="cursor-pointer hover:text-primary">
                  <InfoCircleOutlined className="mb-1 mt-1 align-middle"></InfoCircleOutlined>{' '}
                  <span className="align-middle">Where is all this data stored? </span>
                </Link>{' '}
              </span>
            </div>
          </div>
        </div>
      </div>
      <div className="panel">
        {/* Header */}
        <div className="mb-5 flex items-center justify-between">
          <h5 className="text-2xl font-semibold text-primary">My Credentials</h5>
        </div>
        <div className="flex justify-between gap-10 text-lg">
          <span className="">
            Public-data Credentials: <span className="ml-2 text-primary">{credentialsStatistics.public}</span>
          </span>
          <span>
            Behaviour Credentials: <span className="ml-2 text-primary">{credentialsStatistics.private}</span>
          </span>

          <span>
            Private-data Credentials: <span className="ml-2 text-primary">{credentialsStatistics.behaviour}</span>
          </span>

          <span>
            System Credentials: <span className="ml-2 text-primary">{credentialsStatistics.configuration}</span>
          </span>
          <span>
            Total Credentials: <span className="ml-2 text-primary">{credentialsStatistics.total}</span>
          </span>
        </div>
        <div>
          <div className="mb-5 w-full">
            {/* Identity Credential */}

            {/* Misc credentials */}
            {Object.keys(credentialsByType).map((type) => (
              <div key={type} className="mb-2 mt-6 w-full">
                <label key={type} className="break-words text-lg font-semibold text-secondary sm:text-sm">
                  {type}
                </label>
                {credentialsByType[type].map((credential) => (
                  <div
                    key={credential.id}
                    className=" mb-4 mt-2 rounded border border-white-light bg-white shadow-[4px_6px_10px_-3px_#bfc9d4] dark:border-[#1b2e4b] dark:bg-[#191e3a] dark:shadow-none">
                    <div className="w-full px-6 py-7">
                      <h5 className="mb-4 break-words text-xl font-semibold ">
                        {credential.type.filter((type: string) => type !== 'VerifiableCredential')}
                      </h5>
                      <p className="text-wrap break-words text-white-dark">
                        <b>Issuer:</b> {credential.issuer}
                      </p>
                      {credential.expirationDate ? (
                        <p className="text-wrap break-words text-white-dark">
                          Expiration: {new Date(credential.expirationDate).toUTCString() || 'None'}
                        </p>
                      ) : null}

                      {Object.entries(credential.credentialSubject)
                        .filter((entry: any[2]) => entry[0] !== 'id' && entry[0] !== 'type')
                        .map((entry: any[2]) => (
                          <p key={entry[0]} className="text-wrap break-words text-white-dark">
                            <b>{entry[0]}</b>: {entry[1].toString()}
                          </p>
                        ))}
                    </div>
                  </div>
                ))}
              </div>
            ))}

            {!credentialsStatistics.total && !credentialsFetched && (
              <label className="mt-4">
                You have not fetched any credentials yet. Please click on the button above to fetch your credentials.
              </label>
            )}
            {!credentialsStatistics.total && credentialsFetched && (
              <label className="mt-4">
                We could not find any credentials for this wallet. Please try again in the future or request us for
                specific credentials.
              </label>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default Credentials;
